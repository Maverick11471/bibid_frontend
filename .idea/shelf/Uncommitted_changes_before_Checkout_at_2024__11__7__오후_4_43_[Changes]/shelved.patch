Index: src/pages/etc2_find/FindMember.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useCallback, useEffect, useState} from 'react';\nimport {\n    Button,\n    Container,\n    Divider,\n    Grid,\n    InputAdornment,\n    List, ListItem, ListItemText,\n    Menu,\n    MenuItem,\n    TextField,\n    Typography\n} from \"@mui/material\";\nimport '../../css/Login.css';\nimport styled from \"styled-components\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchMemberId, findIdByEmail, findMember, verificationCodeCheck} from \"../../apis/etc2_memberapis/memberApis\";\n\nconst FindBlock = styled.div`\n    display: flex;\n    width: 25rem;\n    border-radius: 10px;\n    background-color: #f1f1f1;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n    border: 1px solid #cdcdcd;\n`;\n\nconst CenteredContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 10%;\n`\n\nconst HeaderTitle = styled.div`\n    font-size: 2rem;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 10px;\n`\n\nconst FindMember = () => {\n\n        const navi = useNavigate();\n        const dispatch = useDispatch();\n\n        const [findForm, setFindForm] = useState({\n            email: ''\n        });\n        const [codeForm, setCodeForm] = useState({\n            verificationCode: ''\n        });\n        const [emailError, setEmailError] = useState('');\n        const [isButtonVisible, setIsButtonVisible] = useState(false);\n        const [verificationButtonVisible, setVerificationButtonVisible] = useState(false);\n        const [mailCodeCheck, setMailCodeCheck] = useState(true);\n        const [emailCheck, setEmailCheck] = useState(false);\n        const [viewButton, setViewButton] = useState(false);\n        const [isPasswordFind, setIsPasswordFind] = useState(false);\n\n        const changeTextField = useCallback((e) => {\n            setFindForm(prevForm => {\n                const updatedForm = {\n                    ...prevForm,\n                    [e.target.name]: e.target.value\n                };\n\n                const email = updatedForm.email;\n                validateEmail(email);\n\n                return updatedForm;\n            });\n\n            setCodeForm({\n                ...codeForm,\n                [e.target.name]: e.target.value\n            });\n\n            if (mailCodeCheck) {\n                document.querySelector(\"#emailInput\").style.display = 'block';\n            }\n\n        }, [findForm, codeForm, mailCodeCheck]);\n\n        const handleFind = useCallback((e) => {\n            e.preventDefault();\n\n            alert(\"인증번호가 발송되었습니다.\");\n\n            dispatch(findMember(findForm));\n\n            setVerificationButtonVisible(true);\n\n            setMailCodeCheck(false);\n\n            setIsButtonVisible(false);\n\n            setEmailCheck(true);\n\n        }, [findForm, dispatch]);\n\n        const emailRegex = /^(?=.*@)(?=.*\\.).+$/;\n\n        const validateEmail = (email) => {\n            if (email.trim() === '') {\n                setEmailError('이메일 주소를 입력해주세요.');\n                setIsButtonVisible(false);\n                return false;\n            } else if (!emailRegex.test(email)) {\n                setEmailError('올바른 이메일 형식이 아닙니다.');\n                setIsButtonVisible(false);\n                return false;\n            } else {\n                setEmailError('');\n                if (!viewButton) {\n                    setIsButtonVisible(true);\n                    setViewButton(true);\n                }\n                return true;\n            }\n        };\n\n        // const memberId = useSelector((state) => state.memberSlice.memberId);\n\n        const handleVerification = useCallback(async (e) => {\n            e.preventDefault();\n\n            try {\n                const result = await dispatch(verificationCodeCheck(codeForm));\n\n                const response = await dispatch(findIdByEmail(findForm));\n\n                if (result.payload) {\n                    if (response.payload.item == null) // db에 이메일이 없을 때\n                    {\n                        alert(\"가입되지 않은 회원입니다. 회원가입을 진행해 주세요.\");\n                        navi(\"/login\");\n                    } else  // db에 이메일이 있을 때\n                    {\n                        alert(`사용자가 가입한 아이디는 '${response.payload.item}'입니다. 비밀번호를 새로 설정하고 싶으면 버튼을 클릭해주세요.`);\n                        setVerificationButtonVisible(false);\n                        setIsPasswordFind(true);\n                    }\n                } else {\n                    alert(\"인증번호가 틀렸습니다. 다시 입력해주세요.\");\n                }\n            } catch (error) {\n                console.error(\"데이터를 가져오는 중 오류 발생:\", error);\n            }\n\n        }, [codeForm, dispatch]);\n\n        const instructions = [\n            \"가입여부 확인이 필요한 이메일을 입력해서 인증번호를 전송해주세요.\",\n            \"입력한 이메일로 발송된 인증번호를 확인해서 인증을 완료해주세요.\",\n            \"이메일가입자는 인증 후 새 비밀번호를 설정할 수 있습니다.\",\n            \"소셜가입자는 인증 후 어떤 소셜 서비스로 연결되었는지 확인할 수 있습니다.\",\n            \"회원탈퇴한 이메일은 탈퇴일로부터 30일 동안은 재가입이 불가능합니다.\"\n        ];\n\n        const handleFindPasswd = (e) => {\n            e.preventDefault();\n\n            navi(\"/ModifyPasswd\");\n        };\n\n        return (\n            <CenteredContainer>\n                <FindBlock>\n                    <HeaderTitle>계정 찾기</HeaderTitle>\n                    <Container sx={{mt: 5, width: '100%'}}>\n                        <form onSubmit={handleFind}>\n                            <Grid item xs={12} textAlign='right' style={{marginBottom: \"10px\"}}>\n                                <TextField\n                                    label=\"이메일\"\n                                    name=\"email\"\n                                    required\n                                    value={findForm.email}\n                                    onChange={changeTextField}\n                                    error={!!emailError}\n                                    id='emailInput'\n                                    disabled={emailCheck}\n                                    fullWidth\n                                />\n                            </Grid>\n                            {emailError && (\n                                <Typography\n                                    component='p'\n                                    variant='string'\n                                    style={{color: 'red', marginTop: '0.5rem', marginLeft: '1.05rem'}}\n                                >\n                                    {emailError}\n                                </Typography>\n                            )}\n                            {isButtonVisible && (\n                                <Button\n                                    name=\"transport-button\"\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    sx={{\n                                        backgroundColor: \"#2196F3\",\n                                        height: \"43px\",\n                                        fontSize: \"18px\",\n                                        backgroundColor: '#D9D9D9', \n                                        color: 'black', \n                                        fontWeight: 'bold', \n                                        transition: 'all 0.3s ease-in-out',\n                                        '&:hover': {\n                                        backgroundColor: \"#0A369D\", // hover 시 배경색 변경\n                                        color: 'white'\n                                        }\n                                    }}\n                                    fullWidth\n                                    id='emailButton'\n                                    disabled={!mailCodeCheck}\n                                >\n                                    인증번호 전송\n                                </Button>\n                            )}\n                        </form>\n                    </Container>\n                    <Container sx={{width: '100%'}}>\n                        {verificationButtonVisible && (\n                            <form onSubmit={handleVerification}>\n                                <Grid item xs={12} style={{marginTop: '10px'}}>\n                                    <Divider/>\n                                </Grid>\n                                <Grid item xs={12} style={{display: 'flex', alignItems: 'center', marginTop: '10px'}}>\n                                    <TextField\n                                        label=\"인증번호\"\n                                        name=\"verificationCode\"\n                                        required\n                                        fullWidth\n                                        value={codeForm.verificationCode}\n                                        onChange={changeTextField}\n                                        style={{flex: 1}}\n                                    />\n                                </Grid>\n                                <Button\n                                    name=\"transport-button\"\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    sx={{\n                                        margin: '10px 0',\n                                        height: \"43px\",\n                                        fontSize: \"18px\",\n                                        backgroundColor: '#D9D9D9', \n                                        color: 'black', \n                                        fontWeight: 'bold', \n                                        transition: 'all 0.3s ease-in-out',\n                                        '&:hover': {\n                                        backgroundColor: \"#0A369D\", // hover 시 배경색 변경\n                                        color: 'white'\n                                        }\n                                    }}\n                                    fullWidth\n                                >\n                                    인증번호 확인\n                                </Button>\n                            </form>\n                        )}\n                        <List>\n                            {instructions.map((instruction, index) => (\n                                <ListItem key={index}>\n                                    <ListItemText primary={`• ${instruction}`} sx={{marginLeft: '8px'}}/>\n                                </ListItem>\n                            ))}\n                        </List>\n                        {isPasswordFind && (\n                            <Button\n                                name=\"transport-button\"\n                                variant=\"contained\"\n                                type=\"submit\"\n                                style={{\n                                    backgroundColor: \"#2196F3\",\n                                    height: \"43px\",\n                                    fontSize: \"18px\"\n                                }}\n                                fullWidth\n                                onClick={handleFindPasswd}\n                            >\n                                비밀번호 찾기\n                            </Button>\n                        )}\n                    </Container>\n                </FindBlock>\n            </CenteredContainer>\n        );\n    }\n;\n\nexport default FindMember;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/etc2_find/FindMember.js b/src/pages/etc2_find/FindMember.js
--- a/src/pages/etc2_find/FindMember.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/etc2_find/FindMember.js	(date 1730965376252)
@@ -15,7 +15,7 @@
 import styled from "styled-components";
 import {useNavigate} from "react-router-dom";
 import {useDispatch, useSelector} from "react-redux";
-import {fetchMemberId, findIdByEmail, findMember, verificationCodeCheck} from "../../apis/etc2_memberapis/memberApis";
+import {fetchMemberId, findIdByEmail, findMember, verificationCodeCheck} from "../../apis/memberapis/memberApis";
 
 const FindBlock = styled.div`
     display: flex;
Index: src/pages/etc2_join/JoinThree.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Container, Typography, Button} from '@mui/material';\nimport styled from \"styled-components\";\nimport Circle from \"../../components/etc2_join/Circle\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchMemberId} from \"../../apis/etc2_memberapis/memberApis\";\nimport {useEffect, useState} from \"react\";\nimport joinOkIcon from \"../../images/join_ok_icon.svg\"\n\nconst JoinBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 1200px;\n    margin: 0 auto;\n    height: 100vh;\n    position: relative;\n`;\n\n\nconst JoinThree = () => {\n\n        const [activeStep, setActiveStep] = useState(2);\n        const memberId = useSelector((state) => state.memberSlice.memberId);\n\n        const dispatch = useDispatch();\n\n        return (\n            <JoinBlock>\n                <Circle activeStep={activeStep}\n                        style={{position: 'absolute', top: '20px', left: '50%', transform: 'translateX(-50%)'}}/>\n                <Container maxWidth=\"sm\" sx={{textAlign: 'center', mt: 5}}>\n                    <Typography variant=\"h4\" sx={{mt: 2, mb: 1, fontWeight: 900, marginBottom: '50px'}}>\n                        회원가입 완료\n                    </Typography>\n                    <div style={{marginBottom: '50px'}}>\n                        <img src={joinOkIcon} alt=\"회원가입 완료 아이콘\" /> {/* 이미지 추가 */}\n                    </div>\n                    <Typography variant=\"body1\" sx={{mb: 2, fontSize: '18px', fontWeight: '600'}}>\n                        {memberId}님의 회원가입이 성공적으로 완료되었습니다.\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{mb: 4, fontSize: '16px', fontWeight: '600'}}>\n                        * 회원가입 내역확인 및 수정은 <span style={{color: '#FF8A00'}}>마이페이지 &gt; 회원정보수정</span> 에서 가능합니다.\n                    </Typography>\n                    <Button variant=\"contained\" color=\"primary\" href=\"/login\" \n                                    sx={{\n                                    margin: '10px 0',\n                                    backgroundColor: \"#DDDDDD\",\n                                    height: \"43px\",\n                                    fontSize: \"18px\",\n                                    fontWeight: '900',\n                                    color: '#444',\n                                    transition: 'all 0.3s ease-in-out',\n                                    '&:hover': {\n                                        backgroundColor: \"#0A369D\", // hover 시 배경색 변경\n                                        color: 'white'\n                                    }\n                                }}>\n                        로그인\n                    </Button>\n                </Container>\n            </JoinBlock>\n        );\n    }\n;\n\nexport default JoinThree;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/etc2_join/JoinThree.js b/src/pages/etc2_join/JoinThree.js
--- a/src/pages/etc2_join/JoinThree.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/etc2_join/JoinThree.js	(date 1730965376212)
@@ -2,7 +2,7 @@
 import styled from "styled-components";
 import Circle from "../../components/etc2_join/Circle";
 import {useDispatch, useSelector} from "react-redux";
-import {fetchMemberId} from "../../apis/etc2_memberapis/memberApis";
+import {fetchMemberId} from "../../apis/memberapis/memberApis";
 import {useEffect, useState} from "react";
 import joinOkIcon from "../../images/join_ok_icon.svg"
 
Index: src/pages/etc2_join/JoinTwo.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import styled from \"styled-components\";\nimport React, {useCallback, useState} from \"react\";\nimport Circle from \"../../components/etc2_join/Circle\";\nimport ButtonComponent from \"../../components/etc2_join/ButtonComponent\";\nimport {useNavigate} from \"react-router-dom\";\nimport {Button, Container, Grid, InputAdornment, Menu, MenuItem, TextField, Typography} from \"@mui/material\";\nimport {Visibility, VisibilityOff} from '@mui/icons-material';\nimport {ChakraProvider, Button as ChakraButton, useDisclosure as CharkraUseDisclosure} from \"@chakra-ui/react\";\nimport SearchAddressModal from \"../../components/etc2_join/SearchAddressModal\";\nimport axios from \"axios\";\nimport {useDispatch} from \"react-redux\";\nimport {join} from \"../../apis/etc2_memberapis/memberApis\"\n\n\n\nconst JoinBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px; /* 상하 여백 추가 */\n`;\n\nconst JoinTwo = () => {\n    const [joinForm, setJoinForm] = useState({\n        memberId: '',\n        name: '',\n        memberPw: '',\n        memberPwCheck: '',\n        nickname: '',\n        email: '',\n        memberPnum: '',\n        memberAddress: '',\n        addressDetail: ''\n    });\n\n    const [memberIdChk, setMemberIdChk] = useState(false);\n    const [memberPwValidate, setMemberPwValidate] = useState(false);\n    const [memberPwChk, setMemberPwChk] = useState(false);\n    const [nicknameChk, setNicknameChk] = useState(false);\n    const [showHelperText, setShowHelperText] = useState(true);\n    const [showMemberPw, setShowMemberPw] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const dispatch = useDispatch();\n    const navi = useNavigate();\n\n    const changeTextField = useCallback((e) => {\n                const {name, value} = e.target;\n\n                setJoinForm((prevForm) => ({\n                    ...prevForm,\n                    [name]: value\n                }));\n\n                // 비밀번호 입력 시 helperText 숨기기\n                if (name === 'memberPw' && value) {\n                    setShowHelperText(false);\n                } else if (name === 'memberPw' && !value) {\n                    setShowHelperText(true);\n                }\n\n                if (e.target.name === 'memberId') {\n                    setMemberIdChk(false);\n                    document.querySelector(\"#memberId-check-btn\").removeAttribute('disabled');\n                    return;\n                }\n\n                if (e.target.name === 'nickname') {\n                    setNicknameChk(false);\n                    document.querySelector(\"#nickname-check-btn\").removeAttribute('disabled');\n                    return;\n                }\n\n                if (e.target.name === 'memberPw') {\n                    if (e.target.value === joinForm.memberPwCheck) {\n                        setMemberPwChk(true);\n                        document.querySelector(\"#memberPw-check-success\").style.display = 'block';\n                        document.querySelector(\"#memberPw-check-fail\").style.display = 'none';\n                    } else {\n                        setMemberPwChk(false);\n                        document.querySelector(\"#memberPw-check-success\").style.display = 'none';\n                        document.querySelector(\"#memberPw-check-fail\").style.display = 'block';\n                    }\n                }\n\n                if (e.target.name === 'memberPwCheck') {\n                    if (e.target.value === joinForm.memberPw) {\n                        setMemberPwChk(true);\n                        document.querySelector(\"#memberPw-check-success\").style.display = 'block';\n                        document.querySelector(\"#memberPw-check-fail\").style.display = 'none';\n                    } else {\n                        setMemberPwChk(false);\n                        document.querySelector(\"#memberPw-check-success\").style.display = 'none';\n                        document.querySelector(\"#memberPw-check-fail\").style.display = 'block';\n                    }\n                }\n\n                // 휴대전화 포맷팅\n                if (name === 'memberPnum') {\n                    // 숫자만 추출\n                    const cleanedValue = value.replace(/\\D/g, '');\n\n                    // 포맷에 맞게 수정\n                    let formattedValue = '';\n                    if (cleanedValue.length < 3) {\n                        formattedValue = cleanedValue;\n                    } else if (cleanedValue.length < 7) {\n                        formattedValue = `${cleanedValue.slice(0, 3)}-${cleanedValue.slice(3)}`;\n                    } else {\n                        formattedValue = `${cleanedValue.slice(0, 3)}-${cleanedValue.slice(3, 7)}-${cleanedValue.slice(7, 11)}`;\n                    }\n\n                    setJoinForm((prevForm) => ({\n                        ...prevForm,\n                        [name]: formattedValue,\n                        memberPnum: cleanedValue, // 실제 저장할 전화번호 (DB에 저장할 값)\n                    }));\n                    return;\n                }\n\n            }, [joinForm]\n        )\n    ;\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleSelectDomain = (domain) => {\n        if (domain) {\n            setJoinForm((prevForm) => ({\n                ...prevForm,\n                email: `${prevForm.email.split('@')[0]}@${domain}`\n            }));\n        } else {\n            setJoinForm((prevForm) => ({\n                ...prevForm,\n                email: ''\n            }));\n        }\n        handleClose();\n    };\n\n\n\n    const toggleShowMemberPw = () => {\n        setShowMemberPw((prev) => !prev);\n    };\n\n\n    const memberIdCheck = useCallback(async () => {\n        try {\n            if (joinForm.memberId === '') {\n                alert('아이디를 입력하세요.');\n                document.querySelector('#memberId').focus();\n                return;\n            }\n\n            const response = await axios.post(`${process.env.REACT_APP_BACK_SERVER}/members/memberId-check`, {\n                memberId: joinForm.memberId\n            });\n\n            if (response.data.item.memberIdCheckMsg === 'invalid memberId') {\n                alert('중복된 아이디입니다. 다른 아이디로 변경해주세요.');\n                document.querySelector('#memberId').focus();\n                return;\n            } else {\n                if (window.confirm(`${joinForm.memberId}은 사용가능한 아이디입니다. 사용하시겠습니까?`)) {\n                    document.querySelector('#memberId-check-btn').setAttribute('disabled', true);\n                    setMemberIdChk(true);\n                    return;\n                }\n            }\n        } catch (e) {\n            console.log(e);\n            alert(\"에러가 발생했습니다.\");\n        }\n    }, [joinForm.memberId]);\n\n    const nicknameCheck = useCallback(async () => {\n        try {\n            if (joinForm.nickname === '') {\n                alert('닉네임을 입력하세요.');\n                document.querySelector('#nickname').focus();\n                return;\n            }\n\n            const response = await axios.post(`${process.env.REACT_APP_BACK_SERVER}/members/nickname-check`, {\n                nickname: joinForm.nickname\n            });\n\n            if (response.data.item.nicknameCheckMsg === 'invalid nickname') {\n                alert('중복된 닉네임입니다. 다른 닉네임을 사용하세요.');\n                document.querySelector('#nickname').focus();\n                return;\n            } else {\n                if (window.confirm(`${joinForm.nickname}은 사용가능한 닉네임입니다. 사용하시겠습니까?`)) {\n                    document.querySelector('#nickname-check-btn').setAttribute('disabled', true);\n                    setNicknameChk(true);\n                    return;\n                }\n            }\n        } catch (e) {\n            console.log(e);\n            alert('에러가 발생했습니다.');\n        }\n    }, [joinForm.nickname]);\n\n    const handleJoin = useCallback((e) => {\n        e.preventDefault();\n\n        if (joinForm.name === '') {\n            alert('이름을 입력하세요.');\n            return;\n        }\n\n        if (!memberIdChk) {\n            alert('아이디 중복확인을 진행하세요.');\n            return;\n        }\n\n        if (!memberPwValidate) {\n            alert('비밀번호는 특수문자, 숫자, 영문자 조합의 9자리 이상으로 지정하세요.');\n            return;\n        }\n\n        if (!memberPwChk) {\n            alert('비밀번호가 일치하지 않습니다.');\n            return;\n        }\n\n        if (!nicknameChk) {\n            alert('닉네임 중복확인을 진행하세요.');\n            return;\n        }\n\n        if (joinForm.memberPnum === '') {\n            alert('휴대전화를 입력하세요.');\n            return;\n        } else if (!validatePhoneNumber()) {\n            alert('휴대전화 번호는 010으로 시작하고, 11자리인 번호만 가능합니다.');\n            return;\n        }\n\n        if (joinForm.email === '') {\n            alert('이메일 주소를 입력하세요.');\n            return;\n        }\n\n        if (joinForm.memberAddress === '') {\n            alert('주소를 입력하세요.');\n            return;\n        }\n\n        dispatch(join(joinForm));\n        return true;\n\n    }, [joinForm, memberIdChk, memberPwChk, memberPwValidate, nicknameChk, dispatch]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const isJoined = handleJoin(e);\n        if (isJoined) {\n            navi('/join/three');\n        }\n    };\n\n    const handlePrev = () => {\n        navi('/join'); // 이전 페이지로 이동\n    };\n\n    const validateMemberPw = useCallback(() => {\n        return /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*+=-]).{9,}$/.test(joinForm.memberPw);\n    }, [joinForm.memberPw]);\n\n    const validatePhoneNumber = useCallback(() => {\n        return /^010\\d{8}$/.test(joinForm.memberPnum);\n    }, [joinForm.memberPnum]);\n\n    const memberPwBlur = useCallback(() => {\n        if (validateMemberPw()) {\n            setMemberPwValidate(true);\n            document.querySelector('#memberPw-validation').style.display = 'none';\n            return;\n        }\n\n        setMemberPwValidate(false);\n        document.querySelector('#memberPw-validation').style.display = 'block';\n        return;\n    }, [validateMemberPw]);\n\n\n// ㅁ 주소창\n    const {\n        isOpen: isSearchAddressOpen,\n        onOpen: onSearchAddressOpen,\n        onClose: onSearchAddressClose,\n    } = CharkraUseDisclosure();\n\n    const [inputAddressValue, setInputAddressValue] = useState('');\n    const [detailAddressValue, setDetailAddressValue] = useState(''); // 상세주소 상태 추가\n    const [showDetailAddressInput, setShowDetailAddressInput] = useState(false);\n\n    const onCompletePost = (data) => {\n\n        const fullAddress = data.address; // 선택한 주소\n        setInputAddressValue(fullAddress); // 상태 업데이트\n        setDetailAddressValue(''); // 상세주소 초기화\n        onSearchAddressClose(); // 모달 닫기\n        setShowDetailAddressInput(true); // 상세주소 입력란 표시\n\n        // joinForm 업데이트\n        setJoinForm((prevForm) => ({\n            ...prevForm,\n            memberAddress: fullAddress\n        }));\n    };\n\n    // 상세주소 입력 시 joinForm 업데이트\n    const handleDetailAddressChange = (e) => {\n        setDetailAddressValue(e.target.value);\n        setJoinForm((prevForm) => ({\n            ...prevForm,\n            addressDetail: `${e.target.value}`.trim()\n        }));\n    };\n\n\n    return (\n        <JoinBlock>\n            <Circle activeStep={1}\n                    style={{position: 'absolute', top: '20px', left: '50%', transform: 'translateX(-50%)'}}/>\n            <Container maxWidth=\"sm\" sx={{mt: 5}}>\n                <Typography variant=\"h4\" align=\"center\" gutterBottom>\n                    기본정보 입력\n                </Typography>\n                <form onSubmit={handleSubmit}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"이름\"\n                                name=\"name\"\n                                value={joinForm.name}\n                                fullWidth\n                                required\n                                onChange={changeTextField} // 수정된 핸들러 사용\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"아이디\"\n                                name=\"memberId\"\n                                id=\"memberId\"\n                                value={joinForm.memberId}\n                                fullWidth\n                                required\n                                onChange={changeTextField}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Button\n                                                name='memberId-check-btn'\n                                                id='memberId-check-btn'\n                                                color='primary'\n                                                type='button'\n                                                onClick={memberIdCheck}\n                                                disabled={memberIdChk}\n                                            >\n                                                중복확인\n                                            </Button>\n                                        </InputAdornment>\n                                    )\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"비밀번호\"\n                                name=\"memberPw\"\n                                value={joinForm.memberPw}\n                                type={showMemberPw ? \"text\" : \"password\"} // 비밀번호 가시성 토글\n                                fullWidth\n                                required\n                                helperText={showHelperText ? \"※ 영문자, 숫자, 특수문자 포함해서 9자 이상 작성하세요.\" : \"\"}\n                                onChange={changeTextField}\n                                onBlur={memberPwBlur}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Button onClick={toggleShowMemberPw}>\n                                                {showMemberPw ? <VisibilityOff/> : <Visibility/>}\n                                            </Button>\n                                        </InputAdornment>\n                                    )\n                                }}\n                            />\n                        </Grid>\n                        <Typography\n                            name='memberPw-validation'\n                            id='memberPw-validation'\n                            component='p'\n                            variant='string'\n                            style={{display: 'none', color: 'red', marginTop: '0.5rem', marginLeft: '1.05rem'}}>\n                            비밀번호는 특수문자, 영문자, 숫자 조합의 9자리 이상으로 지정하세요.\n                        </Typography>\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"비밀번호 확인\"\n                                name=\"memberPwCheck\"\n                                type={showMemberPw ? \"text\" : \"password\"} // 비밀번호 가시성 토글\n                                fullWidth\n                                required\n                                onChange={changeTextField} // 수정된 핸들러 사용\n                            />\n                        </Grid>\n                        <Typography\n                            name='memberPw-check-success'\n                            id='memberPw-check-success'\n                            component='p'\n                            variant='string'\n                            style={{display: 'none', color: 'green', marginTop: '0.5rem', marginLeft: '1.05rem'}}>\n                            비밀번호가 일치합니다.\n                        </Typography>\n                        <Typography\n                            name='memberPw-check-fail'\n                            id='memberPw-check-fail'\n                            component='p'\n                            variant='string'\n                            style={{display: 'none', color: 'red', marginTop: '0.5rem', marginLeft: '1.05rem'}}>\n                            비밀번호가 일치하지 않습니다.\n                        </Typography>\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"닉네임\"\n                                name=\"nickname\"\n                                id=\"nickname\"\n                                value={joinForm.nickname}\n                                fullWidth\n                                required\n                                onChange={changeTextField}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Button\n                                                name='nickname-check-btn'\n                                                id='nickname-check-btn'\n                                                color='primary'\n                                                type='button'\n                                                onClick={nicknameCheck}\n                                                disabled={nicknameChk}\n                                            >\n                                                중복확인\n                                            </Button>\n                                        </InputAdornment>\n                                    )\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"휴대전화\"\n                                name=\"memberPnum\" // 맞춤\n                                fullWidth\n                                required\n                                value={joinForm.memberPnum} // 상태를 사용하여 값 설정\n                                onChange={changeTextField} // 수정된 핸들러 사용\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"이메일\"\n                                name=\"email\"\n                                fullWidth\n                                required\n                                value={joinForm.email} // 상태를 사용하여 값 설정\n                                onChange={changeTextField}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Button onClick={handleClick}>\n                                                도메인 선택\n                                            </Button>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                            <Menu\n                                anchorEl={anchorEl}\n                                open={Boolean(anchorEl)}\n                                onClose={handleClose}\n                            >\n                                <MenuItem onClick={() => handleSelectDomain(\"naver.com\")}>naver.com</MenuItem>\n                                <MenuItem onClick={() => handleSelectDomain(\"nate.com\")}>nate.com</MenuItem>\n                                <MenuItem onClick={() => handleSelectDomain(\"gmail.com\")}>gmail.com</MenuItem>\n                                <MenuItem onClick={() => handleSelectDomain(\"daum.net\")}>daum.net</MenuItem>\n                                <MenuItem onClick={() => handleSelectDomain(\"\")}>직접 입력</MenuItem>\n                            </Menu>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            <TextField\n                                label=\"주소\"\n                                name=\"memberAddress\"\n                                fullWidth\n                                required\n                                value={inputAddressValue}\n                                readonly\n                                InputProps={{\n                                    endAdornment: (\n                                        <div>\n                                            <InputAdornment position=\"end\">\n                                                <Button onClick={onSearchAddressOpen}>\n                                                    주소 검색\n                                                </Button>\n                                            </InputAdornment>\n\n                                            <ChakraProvider>\n                                                {isSearchAddressOpen && (\n                                                    <SearchAddressModal\n                                                        isOpen={isSearchAddressOpen}\n                                                        onClose={onSearchAddressClose}\n                                                        onCompletePost={onCompletePost}\n                                                    />\n                                                )}\n\n\n                                            </ChakraProvider>\n                                        </div>\n                                    ),\n                                }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            {showDetailAddressInput && (\n                                <Grid item xs={12}>\n                                    <TextField\n                                        label=\"상세주소 입력\"\n                                        name=\"detailAddress\"\n                                        value={detailAddressValue}\n                                        fullWidth\n                                        required\n                                        onChange={handleDetailAddressChange}\n                                    />\n                                </Grid>\n                            )}\n                        </Grid>\n                    </Grid>\n                    <ButtonComponent prev={'제출'} next={'이전'} onSubmit={handleSubmit} onPrev={handlePrev}/>\n                </form>\n            </Container>\n        </JoinBlock>\n    )\n        ;\n}\n\nexport default JoinTwo;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/etc2_join/JoinTwo.js b/src/pages/etc2_join/JoinTwo.js
--- a/src/pages/etc2_join/JoinTwo.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/etc2_join/JoinTwo.js	(date 1730965376265)
@@ -9,7 +9,7 @@
 import SearchAddressModal from "../../components/etc2_join/SearchAddressModal";
 import axios from "axios";
 import {useDispatch} from "react-redux";
-import {join} from "../../apis/etc2_memberapis/memberApis"
+import {join} from "../../apis/memberapis/memberApis"
 
 
 
Index: src/components/categoryItemDetail/CatItDetMain.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from 'react';\nimport '../../css/CategoryItemDetail.css';\nimport Modal from 'react-modal';\n// material ui 아이콘 불러오기\nimport AddBoxIcon from '@mui/icons-material/AddBox';\nimport IndeterminateCheckBoxIcon from '@mui/icons-material/IndeterminateCheckBox';\nimport {IconButton} from '@mui/material';\nimport axios from 'axios';\nimport PlusIcon from '../../images/+_icon.svg';\nimport MinusIcon from '../../images/-_icon.svg';\nimport loadingImage from '../../images/로딩화면.gif'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport { fetchMember } from '../../apis/etc2_memberapis/memberApis';\n\n\nconst CatItDetMain = ({\n                          auctionItem,\n                          auctionBidInfo,\n                          seller,\n                          biddingMember,\n                          infoExtension,\n                          sellerDetailInfo,\n                          auctionImages\n                      }) => {\n\n    const [mainImage, setMainImage] = useState(null);\n    const [thumbnails, setThumbnails] = useState([]);\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const dispatch = useDispatch();\n\n    // auctionImages가 업데이트될 때 mainImage를 설정\n    useEffect(() => {\n        if (auctionImages && auctionImages.length > 0) {\n            setMainImage(auctionImages[0]);\n            setThumbnails(auctionImages.slice(1));\n        }\n    }, [auctionImages]);\n\n    const handlePrevClick = () => {\n        if (currentIndex > 0) {\n            setCurrentIndex(currentIndex - 1);\n        }\n    };\n\n    const handleNextClick = () => {\n        if (currentIndex < thumbnails.length - 4) {\n            setCurrentIndex(currentIndex + 1);\n        }\n    };\n\n    const handleThumbnailClick = (clickedImage) => {\n        setThumbnails((prevThumbnails) => {\n            const updatedThumbnails = prevThumbnails.filter((img) => img !== clickedImage);\n            return [mainImage, ...updatedThumbnails];\n        });\n        setMainImage(clickedImage);\n    };\n\n    // 판매자 정보 더 보기 모달창\n    const [sellerModalOpen, setSellerModalOpen] = useState(false);\n    const navi = useNavigate();\n\n    const checkLoginState = useSelector(state => state.memberSlice.checkLoginState);\n    const openSellerModal = () => {\n        if (!checkLoginState) {\n            alert(\"로그인 후 사용하시기 바랍니다.\");\n            navi(\"/login\");\n        } else {\n            setSellerModalOpen(true);\n        }\n    };\n    const closeSellerModal = () => {\n        setSellerModalOpen(false);\n    };\n\n    // 입찰 기록 보기 모달창\n    const [biddingRecordModalOpen, setBiddingRecordModalOpen] = useState(false);\n    const openBiddingRecordModal = () => {\n        setBiddingRecordModalOpen(true);\n    };\n    const closeBiddingRecordModal = () => {\n        setBiddingRecordModalOpen(false);\n    };\n\n\n    // 희망 입찰가 상태 관리\n    const [bidAmount, setBidAmount] = useState(0);\n\n    useEffect(() => {\n        // auctionItem이 업데이트될 때마다 bidAmount를 설정\n        if (auctionItem && auctionItem.startingPrice) {\n            setBidAmount(parseInt(infoExtension[1]) + parseInt(auctionItem.bidIncrement));\n        }\n    }, [auctionItem]); // auctionItem이 변경될 때마다 이 코드가 실행됨\n\n    // 입찰가 증가 함수\n    const increaseBid = (bidIncrement) => {\n        setBidAmount((prevBid) => prevBid + bidIncrement);\n    };\n    // 입찰가 감소 함수\n    const decreaseBid = (bidIncrement) => {\n        setBidAmount((prevBid) => Math.max(prevBid - bidIncrement, parseInt(infoExtension[1]) + parseInt(bidIncrement)));\n    };\n\n\n    // 입찰하기 모달창\n    const [biddingNowModalOpen, setBiddingNowModalOpen] = useState(false);\n\n\n    const openBiddingNowModal = () => {\n        if (!checkLoginState) {\n            alert(\"로그인 후 사용하시기 바랍니다.\");\n            navi(\"/login\");\n        } else {\n            setBiddingNowModalOpen(true);\n        }\n    };\n    const closeBiddingNowModal = () => {\n        setBiddingNowModalOpen(false);\n    };\n\n    const nowBiddingInfo = {\n        userBiddingType: \"bid\",\n        name: \"auctionItem.productName\",\n        category: \"아이템의 카테고리\",\n        bidPrice: bidAmount,\n        purchaseFee: (bidAmount / 10), // 구매 수수료 는 구매가의 10퍼센트\n    };\n    // const totalPrice = nowBiddingInfo.bidPrice + nowBiddingInfo.purchaseFee;\n    const totalPrice = parseInt(bidAmount + bidAmount / 10);\n\n    // 입찰하기 데이터 전송 함수\n    const handleBidNow = () => {\n        if (!checkLoginState) {\n            alert(\"로그인 후 사용하시기 바랍니다.\");\n            navi(\"/login\");\n        } else {\n            const biddingData = {\n                userBiddingType: \"bid\",\n                userBiddingItemName: auctionItem.productName.toLocaleString(),\n                userBiddingCategory: auctionItem.category.toLocaleString(),\n                userBiddingPrice: bidAmount,\n                userBiddingTotalPrice: totalPrice\n            };\n\n\n            // 백엔드로 데이터 전송\n            axios.post(`${process.env.REACT_APP_BACK_SERVER}/auctionDetail/category-item-detail/${auctionItem.auctionIndex}`, biddingData, {\n                headers: {\n                    'Content-Type': 'application/json', // 요청의 콘텐츠 타입을 JSON으로 지정\n                },\n                withCredentials: true\n            })\n                .then((response) => {\n                    alert('입찰이 성공적으로 전송되었습니다.');\n                    dispatch(fetchMember()); \n                    closeBiddingNowModal();\n                    window.location.href = `/category-itemdetail/${auctionItem.auctionIndex}`;\n                })\n                .catch((error) => {\n                    console.error('Error:', error); // 오류 발생 시 오류 메시지 출력\n                    alert('이미 최고 입찰자입니다.');\n                    closeBiddingNowModal();\n                });\n        }\n    };\n\n\n    // 즉시구매가 설정\n    const [buyNowPrice, setBuyNowPrice] = useState(0);\n\n    useEffect(() => {\n        // auctionItem이 업데이트될 때마다 bidAmount를 설정\n        if (auctionItem && auctionItem.instantPurchasePrice) {\n            setBuyNowPrice(auctionItem.instantPurchasePrice);\n        }\n    }, [auctionItem]); // auctionItem이 변경될 때마다 이 코드가 실행됨\n\n    // 즉시구매 모달창\n    const [buyingNowModalOpen, setBuyingNowModalOpen] = useState(false);\n\n\n    const openBuyingNowModal = () => {\n        if (!checkLoginState) {\n            alert(\"로그인 후 사용하시기 바랍니다.\");\n            navi(\"/login\");\n        } else {\n            setBuyingNowModalOpen(true);\n        }\n    };\n    const closeBuyingNowModal = () => {\n        setBuyingNowModalOpen(false);\n    };\n    // 즉시구매 모달의 아이템 현재 정보\n    const nowBuyingInfo = {\n        userBiddingType: \"buyNow\",\n        name: \"auctionItem.productName\",\n        category: \"아이템의 카테고리\",\n        buyNowPrice: buyNowPrice,\n        buyNowpurchaseFee: parseInt(buyNowPrice / 10),\n    };\n    const paymentAccount = parseInt(nowBuyingInfo.buyNowPrice + nowBuyingInfo.buyNowpurchaseFee);\n\n    // 즉시 구매 데이터 전송 함수\n    const handleBuyNow = () => {\n        const buyingData = {\n            userBiddingType: \"buyNow\",\n            userBiddingItemName: auctionItem.productName,\n            userBiddingCategory: auctionItem.category,\n            userBiddingPrice: nowBuyingInfo.buyNowPrice,\n            userBiddingTotalPrice: paymentAccount,\n        };\n\n\n        // 백엔드로 데이터 전송\n        axios.post(`${process.env.REACT_APP_BACK_SERVER}/auctionDetail/category-item-detail/${auctionItem.auctionIndex}`, buyingData, {\n            headers: {\n                'Content-Type': 'application/json', // 요청의 콘텐츠 타입을 JSON으로 지정\n            }\n        })\n            .then((response) => {\n                alert('즉시 구매가 성공적으로 전송되었습니다.');\n                closeBuyingNowModal();\n            })\n            .catch((error) => {\n                console.error('Error:', error); // 오류 발생 시 오류 메시지 출력\n            });\n    };\n\n    if (!auctionItem || !auctionBidInfo || !seller) {\n        return <div className='loading_image'><img src={loadingImage}></img></div>; // 데이터를 받기 전에 로딩 처리\n    }\n\n    // 남은시간 에서 사용할 남은 시간을 계산하는 함수\n    const now = new Date();\n    const endDate = new Date(auctionItem.endingLocalDateTime);\n    const diffTime = endDate - now; // 남은 시간 (밀리초)\n\n    const days = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((diffTime % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((diffTime % (1000 * 60)) / 1000);\n\n    // console.log(\"auctionBidInf0000 : \" + auctionBidInfo[0].auctionInfoIndex);\n    // console.log(\"auctionBidInf1111 : \" + auctionBidInfo[1].auctionInfoIndex);\n    // console.log(\"biddingMember 0 \" + biddingMember[0].nickname);\n    // console.log(\"biddingMember 1 \" + biddingMember[1].nickname);\n    // console.log(\"allImages : \", auctionImages);\n\n    return (\n        <div className=\"CID-item-block\">\n            <div className=\"CID-bid-item-container\">\n\n                <div className='CID-bid-item-container-left'>\n                    {/* 이미지 섹션 */}\n                    <div className=\"CID-image-section\">\n                        <img src={mainImage} alt=\"Main Image\" className=\"CID-main-image\"/>\n                    </div>\n                    <div className=\"CID-thumbnail-container\">\n                        <button\n                            className=\"prev-button\"\n                            onClick={handlePrevClick}\n                            disabled={currentIndex === 0}\n                        >\n                            &lt;\n                        </button>\n\n                        {thumbnails.slice(currentIndex, currentIndex + 4).map((imageUrl, index) => (\n                            <img\n                                key={index}\n                                src={imageUrl}\n                                alt={`Image ${index + 1}`}\n                                className=\"CID-thumbnail\"\n                                onClick={() => handleThumbnailClick(imageUrl)}\n                            />\n                        ))}\n\n                        <button\n                            className=\"next-button\"\n                            onClick={handleNextClick}\n                            disabled={currentIndex >= thumbnails.length - 4}\n                        >\n                            &gt;\n                        </button>\n                    </div>\n\n                    {/* 판매자 섹션 */}\n                    <div className=\"CID-merchant-section\">\n                        <div className=\"CID-merchant-info\">\n                            <p>판매자: {seller.nickname}</p>\n                            <p>{seller.nickname}의 등록된 경매: {parseInt(infoExtension[2])}건</p>\n                        </div>\n                        <div className=\"CID-merchant-link\">\n                            <button className='CID-seller-more-info-hvr' onClick={openSellerModal}>\n                                <p>판매자 {seller.nickname} 의 정보 더보기</p></button>\n                            {/* 첫 번째 모달 - open-seller-modal : 판매자 정보 더 보기 */}\n                            <Modal\n                                isOpen={sellerModalOpen}\n                                onRequestClose={closeSellerModal}\n                                className=\"CID-seller-modal-content\"\n                                overlayClassName=\"CID-seller-modal-overlay\"\n                            >\n                                {/* 모달 상단 부분 */}\n                                <div className=\"CID-seller-modal-header\">\n                                    {/* <img src=\"../img/tmp-profile-icon.png\" alt=\"판매자 아이콘\" className=\"CID-seller-modal-icon\" /> */}\n                                    <h2>판매자 정보 더보기</h2>\n                                    {/* <button className=\"CID-seller-modal-close\" onClick={closeModal}>X</button> */}\n                                </div>\n                                <table className=\"CID-seller-modal-table\">\n                                    <tbody>\n                                    <tr>\n                                        <th>판매자 아이디</th>\n                                        <td>{seller.memberId}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>전화번호</th>\n                                        <td>{seller.memberPnum}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>E-mail</th>\n                                        <td>{seller.email}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>상호명</th>\n                                        <td>{sellerDetailInfo.businessName}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>사업자 구분</th>\n                                        <td>{sellerDetailInfo.businessClassification}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>통판매업 신고</th>\n                                        <td>{sellerDetailInfo.salesDeclaration}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>사업자등록번호</th>\n                                        <td>{sellerDetailInfo.businessRegistrationNum}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>대표자</th>\n                                        <td>{sellerDetailInfo.exponent}</td>\n                                    </tr>\n                                    <tr>\n                                        <th>영업 소재지</th>\n                                        <td>{sellerDetailInfo.businessLocation}</td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n\n                                {/* 확인 버튼 */}\n                                <div className='CID-seller-modal-confirm-button-box'>\n                                    <button className=\"CID-seller-modal-confirm-button\" onClick={closeSellerModal}>확인\n                                    </button>\n                                </div>\n                            </Modal>\n                        </div>\n                    </div>\n                </div>\n\n                {/* 입찰 섹션 */}\n                <div className=\"CID-bid-section\">\n                    <div className=\"CID-bid-title\">{auctionItem.productName}</div>\n\n                    <div className='CID-bid-container'>\n                        <div className='CID-bid-cotents-title'>\n                            <h2>현재가: </h2>\n                            <p>남은시간: </p>\n                            <p>경매번호: </p>\n                            <p>시작가: </p>\n                            <p>입찰기록: </p>\n                            <p>입찰단위: </p>\n                            <p>입찰 희망가: </p>\n                            <p>예상 구매가: </p>\n                        </div>\n                        <div className='CID-bid-cotents'>\n                            <h2>{parseInt(infoExtension[1]).toLocaleString()} 원</h2>\n                            <h3>{days}일 {hours}시간 {minutes}분 {seconds} 초</h3>\n                            <p>No.{auctionItem.auctionIndex}</p>\n                            <p>{parseInt(auctionItem.startingPrice).toLocaleString()} 원</p>\n                            <p>{parseInt(infoExtension[0]).toLocaleString()}회\n                                <span className=\"CID-hover-link\" onClick={openBiddingRecordModal}>    [기록보기]</span>\n                            </p>\n\n                            {/* 두 번째 모달 - bidding-record-modal : 입찰 기록 보기 */}\n                            <Modal\n                                isOpen={biddingRecordModalOpen}\n                                onRequestClose={closeBiddingRecordModal}\n                                className=\"CID-bidding-record-modal-content\"\n                                overlayClassName=\"CID-bidding-record-modal-overlay\"\n                            >\n                                <h2>입찰기록내역</h2>\n                                <table className=\"CID-bidding-record-table\">\n                                    <thead>\n                                    <tr>\n                                        <th>입찰일시</th>\n                                        <th>입찰자 닉네임</th>\n                                        <th>입찰금액</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    {auctionBidInfo.map((record, index) => (\n                                        <tr key={index}>\n                                            <td>{new Intl.DateTimeFormat('ko-KR', {\n                                                year: 'numeric',\n                                                month: 'long',\n                                                day: 'numeric',\n                                                hour: '2-digit',\n                                                minute: '2-digit',\n                                                second: '2-digit',\n                                            }).format(new Date(record.bidTime))}\n                                            </td>\n                                            <td>{biddingMember[index].nickname}</td>\n                                            <td>{record.bidAmount}</td>\n                                        </tr>\n                                    ))}\n                                    </tbody>\n                                </table>\n                                <div className=\"CID-bidding-record-pagination\">\n                                    <span>1</span>\n                                </div>\n                                <button className=\"CID-bidding-record-confirm-button\"\n                                        onClick={closeBiddingRecordModal}>확인\n                                </button>\n                            </Modal>\n\n                            <p>{parseInt(auctionItem.bidIncrement).toLocaleString()}원</p>\n                            <div className=\"CID-bid-input-wrapper\">\n\n                                <div className=\"CID-bid-input\">\n                                    <input\n                                        type=\"text\"\n                                        id=\"bid-amount\"\n                                        value={parseInt(bidAmount).toLocaleString()}\n                                        readOnly/>\n                                </div>\n                                원\n                                {/* 백엔드 로직 : bidInfo테이블의 최신입찰가 */}\n                                <div className=\"CID-bid-buttons-vertical\">\n                                    <button className=\"CID-bid-plus-button\" sx={{width: \"10px\"}}\n                                            onClick={() => increaseBid(Number(auctionItem.bidIncrement))}>\n                                        <img src={PlusIcon}></img>\n                                    </button>\n                                    <button className=\"CID-bid-minus-button\"\n                                            onClick={() => decreaseBid(auctionItem.bidIncrement)}>\n                                        <img src={MinusIcon}></img>\n                                    </button>\n                                </div>\n\n                            </div>\n                            <div className='CID-bid-expected-price'>\n                                <h3>{parseInt(totalPrice).toLocaleString()} 원</h3>\n                                <p>(입찰 희망가 {nowBiddingInfo.bidPrice.toLocaleString()} 원 +\n                                    구매수수료 {parseInt(nowBiddingInfo.purchaseFee).toLocaleString()} 원)</p>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* 백엔드 로직 : bidInfo테이블의 최신입찰가 */}\n                    {/* <div className=\"CID-divider\"></div> */}\n\n                    {/* 버튼 */}\n                    <div className=\"CID-bid-buttons\">\n                        {/* 세 번째 모달 bidding-now-modal */}\n                        <button className=\"CID-bid-button\" onClick={openBiddingNowModal}><p>입찰하기</p></button>\n                        <Modal\n                            isOpen={biddingNowModalOpen}\n                            onRequestClose={closeBiddingNowModal}\n                            className=\"CID-bidding-now-modal-content\"\n                            overlayClassName=\"CID-bidding-now-modal-overlay\"\n                        >\n                            <h2 className=\"CID-bidding-now-modal-title\">입찰 {auctionItem.auctionStatus}</h2>\n                            <div className=\"CID-bidding-now-modal-body\">\n                                <div className=\"CID-bidding-now-modal-image\">\n                                    <img src={auctionImages[0]} alt={`${auctionItem.productName}`}/>\n                                </div>\n                                <div className=\"CID-bidding-now-modal-details\">\n                                    <h3>{auctionItem.productName} 경매</h3>\n                                    <p><strong className='bidding-now-modal-details-p'>경매 분류\n                                        : </strong> {auctionItem.category}</p>\n                                    <p><strong className='bidding-now-modal-details-p'>입찰 희망가 : </strong> <span\n                                        className=\"CID-highlight-red\">{nowBiddingInfo.bidPrice.toLocaleString()} 원</span>\n                                    </p>\n                                    <p><strong className='bidding-now-modal-details-p'>구매 예상가\n                                        : </strong> {parseInt(totalPrice).toLocaleString()} 원</p>\n                                    <p className='bidding-now-modal-price-info'>(입찰\n                                        희망가 {nowBiddingInfo.bidPrice.toLocaleString()} 원 +\n                                        구매수수료 {parseInt(nowBiddingInfo.purchaseFee).toLocaleString()} 원)</p>\n                                </div>\n                            </div>\n                            <div className='CID-bidding-now-modal-bid-button-box'>\n                                <button className=\"CID-bidding-now-modal-bid-button\" onClick={handleBidNow}>\n                                    입찰하기\n                                </button>\n                            </div>\n                        </Modal>\n\n                        {/* 네 번째 모달 buying-now-modal */}\n                        {auctionItem.instantPurchasePrice !== null && (\n                            <button className=\"CID-bid-button buy-button\" onClick={openBuyingNowModal}>\n                                <p>{nowBuyingInfo.buyNowPrice.toLocaleString()} 원으로 즉시 구매</p>\n                            </button>\n                        )}\n                        <Modal\n                            isOpen={buyingNowModalOpen}\n                            onRequestClose={closeBuyingNowModal}\n                            className=\"CID-bidding-now-modal-content\"\n                            overlayClassName=\"CID-bidding-now-modal-overlay\"\n                        >\n                            <h2 className=\"CID-bidding-now-modal-title\">구매 {auctionItem.auctionStatus}</h2>\n                            <div className=\"CID-bidding-now-modal-body\">\n                                <div className=\"CID-bidding-now-modal-image\">\n                                    <img src={auctionImages[0]} alt={`${auctionItem.productName}`}/>\n                                </div>\n                                <div className=\"CID-bidding-now-modal-details\">\n                                    <h3>{auctionItem.productName} 경매</h3>\n                                    <p><strong className='bidding-now-modal-details-p'>경매 분류\n                                        : </strong> {auctionItem.category}</p>\n                                    <p><strong className='bidding-now-modal-details-p'>즉시 구매가\n                                        : </strong> {nowBuyingInfo.buyNowPrice.toLocaleString()} 원</p>\n                                    <p><strong className='bidding-now-modal-details-p'>총 결재금액 : </strong><span\n                                        className=\"CID-highlight-red\"> {paymentAccount.toLocaleString()}</span> 원</p>\n                                    <p className='biddng-now-modal-price-info'>(즉시\n                                        구매가 {nowBuyingInfo.buyNowPrice.toLocaleString()} 원 + 구매\n                                        수수료 {nowBuyingInfo.buyNowpurchaseFee.toLocaleString()} 원)</p>\n                                </div>\n                            </div>\n                            <div className='CID-bidding-now-modal-bid-button-box'>\n                                <button className=\"CID-bidding-now-modal-bid-button\" onClick={handleBuyNow}>즉시 구매\n                                </button>\n                            </div>\n                        </Modal>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CatItDetMain;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/categoryItemDetail/CatItDetMain.js b/src/components/categoryItemDetail/CatItDetMain.js
--- a/src/components/categoryItemDetail/CatItDetMain.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/components/categoryItemDetail/CatItDetMain.js	(date 1730965376229)
@@ -11,7 +11,7 @@
 import loadingImage from '../../images/로딩화면.gif'
 import {useDispatch, useSelector} from "react-redux";
 import {useNavigate} from "react-router-dom";
-import { fetchMember } from '../../apis/etc2_memberapis/memberApis';
+import { fetchMember } from '../../apis/memberapis/memberApis';
 
 
 const CatItDetMain = ({
Index: src/slices/member/memberSlice.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {createSlice} from '@reduxjs/toolkit';\nimport {\n    checkLogin,\n    findIdByEmail,\n    findMember,\n    googleJwtToken,\n    join,\n    kakaoJwtToken,\n    login,\n    logout,\n    modifyPasswd,\n    naverJwtToken,\n    verificationCodeCheck,\n    uploadProfileImage,\n    chargeAccount,\n    exchangeAccount,\n    buyAuction,\n    sellAuction,\n    fetchMember\n} from '../../apis/etc2_memberapis/memberApis';\n\nconst memberSlice = createSlice({\n    name: 'members',\n    initialState: {\n        memberIndex: 0,\n        memberId: '',\n        nickname: '',\n        email: '',\n        verificationCode: '',\n        token: '',\n        keepLogin: false,\n        memberPw: '',\n        oauthType: '',\n        isLogin: false,\n        address: '',\n        addressDetail: '',\n        name: '',\n        memberPnum: '',\n        checkLoginState: false,\n        profileImageDto: '',\n        accountDto:''\n    },\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(join.fulfilled, (state, action) => {\n            alert(`${action.payload.memberId}님 가입 축하드립니다.`);\n            return state;\n        });\n        builder.addCase(join.rejected, (state, action) => {\n            alert('에러가 발생했습니다.');\n            return state;\n        });\n        builder.addCase(login.fulfilled, (state, action) => {\n            alert(`${action.payload.memberId}님 환영합니다.`);\n\n            return {\n                ...state,\n                memberIndex: action.payload.memberIndex,\n                memberId: action.payload.memberId,\n                nickname: action.payload.nickname,\n                token: action.payload.token,\n                profileImageDto : action.payload.profileImageDto,\n                accountDto : action.payload.accountDto,\n                isLogin: true,\n                role: action.payload.role,\n            };\n        });\n        builder.addCase(login.rejected, (state, action) => {\n            if (action.payload.response.data.statusMessage === 'memberId not exist') {\n                alert(\"존재하지 않는 아이디입니다.\");\n                return state;\n            }\n\n            if (action.payload.response.data.statusMessage === 'wrong memberPw') {\n                alert(\"잘못된 비밀번호입니다.\");\n                return state;\n            }\n            return state;\n        });\n        builder.addCase(logout.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                memberIndex: 0,\n                memberId: '',\n                nickname: '',\n                token: '',\n                profileImageDto : '',\n                accountDto : '',\n                isLogin: false,\n                role: '',\n                checkLoginState: ''\n            }\n        });\n        builder.addCase(logout.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(findMember.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                email: action.payload\n            }\n        });\n        builder.addCase(findMember.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(verificationCodeCheck.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                verificationCode: action.payload\n            }\n        });\n        builder.addCase(verificationCodeCheck.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(findIdByEmail.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                memberId: action.payload.item\n            }\n        });\n        builder.addCase(findIdByEmail.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(modifyPasswd.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                memberPw: action.payload.item\n            }\n        });\n        builder.addCase(modifyPasswd.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(kakaoJwtToken.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                isLogin: true,\n                memberIndex: action.payload.memberIndex,\n                type: action.payload.type,\n                addressDetail: action.payload.addressDetail,\n                email: action.payload.email,\n                address: action.payload.memberAddress,\n                memberId: action.payload.memberId,\n                nickname: action.payload.nickname,\n                name: action.payload.name,\n                memberPnum: action.payload.memberPnum\n            }\n        });\n        builder.addCase(kakaoJwtToken.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(naverJwtToken.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                isLogin: true,\n                memberIndex: action.payload.memberIndex,\n                type: action.payload.type,\n                addressDetail: action.payload.addressDetail,\n                email: action.payload.email,\n                address: action.payload.memberAddress,\n                memberId: action.payload.memberId,\n                nickname: action.payload.nickname,\n                name: action.payload.name,\n                memberPnum: action.payload.memberPnum\n            }\n        });\n        builder.addCase(naverJwtToken.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(googleJwtToken.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                isLogin: true,\n                memberIndex: action.payload.memberIndex,\n                type: action.payload.type,\n                addressDetail: action.payload.addressDetail,\n                email: action.payload.email,\n                address: action.payload.memberAddress,\n                memberId: action.payload.memberId,\n                nickname: action.payload.nickname,\n                name: action.payload.name,\n                memberPnum: action.payload.memberPnum\n            }\n        });\n        builder.addCase(googleJwtToken.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        builder.addCase(checkLogin.fulfilled, (state, action) => {\n\n            return {\n                ...state,\n                checkLoginState: action.payload\n            }\n\n        })\n        builder.addCase(checkLogin.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        })\n        builder.addCase(uploadProfileImage.fulfilled, (state, action) => {\n            return{\n                ...state,\n                profileImageDto : action.payload\n            }\n        })\n        builder.addCase(uploadProfileImage.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n\n        builder.addCase(chargeAccount.fulfilled, (state, action) => {\n\n            return{\n                ...state,\n                accountDto : action.payload\n            }\n        })\n        builder.addCase(chargeAccount.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n\n        builder.addCase(exchangeAccount.fulfilled, (state, action) => {\n            return{\n                ...state,\n                accountDto : action.payload\n            }\n        })\n        builder.addCase(exchangeAccount.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n\n        builder.addCase(buyAuction.fulfilled, (state, action) => {\n            return{\n                ...state,\n                accountDto : action.payload\n            }\n        })\n        builder.addCase(buyAuction.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n\n        builder.addCase(sellAuction.fulfilled, (state, action) => {\n            return{\n                ...state,\n                accountDto : action.payload\n            }\n        })\n        builder.addCase(sellAuction.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n\n        builder.addCase(fetchMember.fulfilled, (state, action) => {\n\n\n            return {\n                ...state,\n                memberIndex: action.payload.memberIndex,\n                memberId: action.payload.memberId,\n                nickname: action.payload.nickname,\n                token: action.payload.token,\n                profileImageDto : action.payload.profileImageDto,\n                accountDto : action.payload.accountDto,\n                isLogin: true, \n            };\n        });\n        builder.addCase(fetchMember.rejected, (state, action) => {\n            alert(\"에러가 발생했습니다.\");\n            return state;\n        });\n        \n\n    }\n});\n\nexport default memberSlice.reducer;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/slices/member/memberSlice.js b/src/slices/member/memberSlice.js
--- a/src/slices/member/memberSlice.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/slices/member/memberSlice.js	(date 1730965376221)
@@ -17,7 +17,7 @@
     buyAuction,
     sellAuction,
     fetchMember
-} from '../../apis/etc2_memberapis/memberApis';
+} from '../../apis/memberapis/memberApis';
 
 const memberSlice = createSlice({
     name: 'members',
Index: src/components/SpecialAuction/TestApi2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { chargeAccount, exchangeAccount, buyAuction, sellAuction } from '../../apis/etc2_memberapis/memberApis'\n\nconst TestApi2 = () => {\n  const dispatch = useDispatch();\n  const [response, setResponse] = useState(null);\n\n  // API 호출 함수들\n  const handleChargeAccount = async () => {\n    const dummyData = {\n      changeAccount: '5000', // 충전 금액\n      useType: '충전'\n    };\n\n    // dispatch로 chargeAccount 액션 호출\n    const resultAction = await dispatch(chargeAccount(dummyData));\n    if (chargeAccount.fulfilled.match(resultAction)) {\n      setResponse(resultAction.payload);\n      console.log('Charge Account 성공:', resultAction.payload);\n    } else {\n      setResponse(`Error: ${resultAction.error.message}`);\n    }\n  };\n\n  const handleExchangeAccount = async () => {\n    const dummyData = {\n      changeAccount: '2000', // 환전 금액\n      useType: '환전'\n    };\n\n    const resultAction = await dispatch(exchangeAccount(dummyData));\n    if (exchangeAccount.fulfilled.match(resultAction)) {\n      setResponse(resultAction.payload);\n      console.log('Exchange Account 성공:', resultAction.payload);\n    } else {\n      setResponse(`Error: ${resultAction.error.message}`);\n    }\n  };\n\n  const handleBuyAuction = async () => {\n    const dummyData = {\n      changeAccount: '3000', // 구매 금액\n      auctionIndex: 1, // 구매할 경매의 ID\n      useType: '구매'\n    };\n\n    const resultAction = await dispatch(buyAuction(dummyData));\n    if (buyAuction.fulfilled.match(resultAction)) {\n      setResponse(resultAction.payload);\n      console.log('Buy Auction 성공:', resultAction.payload);\n    } else {\n      setResponse(`Error: ${resultAction.error.message}`);\n    }\n  };\n\n  const handleSellAuction = async () => {\n    const dummyData = {\n      changeAccount: '1500', // 판매 금액\n      auctionIndex: 1, // 판매할 경매의 ID\n      useType: '판매'\n    };\n\n    const resultAction = await dispatch(sellAuction(dummyData));\n    if (sellAuction.fulfilled.match(resultAction)) {\n      setResponse(resultAction.payload);\n      console.log('Sell Auction 성공:', resultAction.payload);\n    } else {\n      setResponse(`Error: ${resultAction.error.message}`);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Account API Test</h1>\n      <button onClick={handleChargeAccount}>Charge Account</button>\n      <button onClick={handleExchangeAccount}>Exchange Account</button>\n      <button onClick={handleBuyAuction}>Buy Auction</button>\n      <button onClick={handleSellAuction}>Sell Auction</button>\n\n      {response && <div><h3>Response:</h3><pre>{JSON.stringify(response, null, 2)}</pre></div>}\n    </div>\n  );\n};\n\nexport default TestApi2;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/SpecialAuction/TestApi2.js b/src/components/SpecialAuction/TestApi2.js
--- a/src/components/SpecialAuction/TestApi2.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/components/SpecialAuction/TestApi2.js	(date 1730965376241)
@@ -1,6 +1,6 @@
 import React, { useState } from 'react';
 import { useDispatch, useSelector } from 'react-redux';
-import { chargeAccount, exchangeAccount, buyAuction, sellAuction } from '../../apis/etc2_memberapis/memberApis'
+import { chargeAccount, exchangeAccount, buyAuction, sellAuction } from '../../apis/memberapis/memberApis'
 
 const TestApi2 = () => {
   const dispatch = useDispatch();
Index: src/slices/payment/paymentSlice.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {createSlice} from '@reduxjs/toolkit';\nimport {join} from '../../apis/etc2_memberapis/memberApis';\n\nconst paymentSlice = createSlice({\n    name: 'payment',\n    initialState: {\n        memberIndex: 0,\n\n    },\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(join.fulfilled, (state, action) => {\n            alert(`${action.payload.memberId}님 가입 축하드립니다.`);\n            return state;\n        });\n        builder.addCase(join.rejected, (state, action) => {\n            alert('에러가 발생했습니다.');\n            return state;\n\n        });\n    }});\n\nexport default paymentSlice.reducer;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/slices/payment/paymentSlice.js b/src/slices/payment/paymentSlice.js
--- a/src/slices/payment/paymentSlice.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/slices/payment/paymentSlice.js	(date 1730965376256)
@@ -1,5 +1,5 @@
 import {createSlice} from '@reduxjs/toolkit';
-import {join} from '../../apis/etc2_memberapis/memberApis';
+import {join} from '../../apis/memberapis/memberApis';
 
 const paymentSlice = createSlice({
     name: 'payment',
Index: src/pages/etc2_find/ModifyPasswd.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useCallback, useState} from 'react';\nimport {Button, Container, Grid, InputAdornment, TextField, Typography} from \"@mui/material\";\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\nimport styled from \"styled-components\";\nimport ButtonComponent from \"../../components/etc2_join/ButtonComponent\";\nimport {useNavigate} from \"react-router-dom\";\nimport {modifyPasswd} from \"../../apis/etc2_memberapis/memberApis\";\nimport {useDispatch} from \"react-redux\";\n\nconst FindBlock = styled.div`\n    display: flex;\n    width: 25rem;\n    border-radius: 10px;\n    background-color: #bfbfbf;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n`;\n\nconst CenteredContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 10%;\n`\n\nconst HeaderTitle = styled.div`\n    font-size: 2rem;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 10px;\n`\n\nconst ModifyPasswd = () => {\n\n    const [passwdForm, setPasswdForm] = useState({\n        memberPw: '',\n        memberPwCheck: ''\n    });\n    const [memberPwValidate, setMemberPwValidate] = useState(false);\n    const [memberPwChk, setMemberPwChk] = useState(false);\n    const [showHelperText, setShowHelperText] = useState(true);\n    const [showMemberPw, setShowMemberPw] = useState(false);\n    const navi = useNavigate();\n    const dispatch = useDispatch();\n\n    const changeTextField = useCallback((e) => {\n        const {name, value} = e.target;\n        setPasswdForm((prevForm) => ({\n            ...prevForm,\n            [name]: value\n        }));\n\n        // 비밀번호 입력 시 helperText 숨기기\n        if (name === 'memberPw' && value) {\n            setShowHelperText(false);\n        } else if (name === 'memberPw' && !value) {\n            setShowHelperText(true);\n        }\n\n        if (e.target.name === 'memberPw') {\n            if (e.target.value === passwdForm.memberPwCheck) {\n                setMemberPwChk(true);\n                document.querySelector(\"#memberPw-check-success\").style.display = 'block';\n                document.querySelector(\"#memberPw-check-fail\").style.display = 'none';\n            } else {\n                setMemberPwChk(false);\n                document.querySelector(\"#memberPw-check-success\").style.display = 'none';\n                document.querySelector(\"#memberPw-check-fail\").style.display = 'block';\n            }\n        }\n\n        if (e.target.name === 'memberPwCheck') {\n            if (e.target.value === passwdForm.memberPw) {\n                setMemberPwChk(true);\n                document.querySelector(\"#memberPw-check-success\").style.display = 'block';\n                document.querySelector(\"#memberPw-check-fail\").style.display = 'none';\n            } else {\n                setMemberPwChk(false);\n                document.querySelector(\"#memberPw-check-success\").style.display = 'none';\n                document.querySelector(\"#memberPw-check-fail\").style.display = 'block';\n            }\n        }\n\n    }, [passwdForm]);\n\n    const handleFindPasswd = useCallback((e) => {\n\n        if (!memberPwValidate) {\n            alert('비밀번호는 특수문자, 숫자, 영문자 조합의 9자리 이상으로 지정하세요.');\n            return;\n        }\n\n        if (!memberPwChk) {\n            alert('비밀번호가 일치하지 않습니다.');\n            return;\n        }\n\n    }, [passwdForm, memberPwChk, memberPwValidate]);\n\n    const validateMemberPw = useCallback(() => {\n        return /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*+=-]).{9,}$/.test(passwdForm.memberPw);\n    }, [passwdForm.memberPw]);\n\n    const memberPwBlur = useCallback(() => {\n        if (validateMemberPw()) {\n            setMemberPwValidate(true);\n            document.querySelector('#memberPw-validation').style.display = 'none';\n            return;\n        }\n\n        setMemberPwValidate(false);\n        document.querySelector('#memberPw-validation').style.display = 'block';\n        return;\n    }, [validateMemberPw]);\n\n    const toggleShowMemberPw = () => {\n        setShowMemberPw((prev) => !prev);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const userConfirmed = window.confirm(\"변경하시겠습니까?\");\n        if(userConfirmed){\n            alert('비밀번호 변경이 완료되었습니다.');\n            dispatch(modifyPasswd(passwdForm));\n            navi(\"/login\");\n        } else {\n            return;\n        }\n    }\n\n    const handlePrev = (e) => {\n        e.preventDefault();\n\n        navi(\"/login\");\n    }\n\n    return (\n        <CenteredContainer>\n            <FindBlock>\n                <HeaderTitle>계정 찾기</HeaderTitle>\n                <Container sx={{mt: 5, width: '100%'}}>\n                    <form onSubmit={handleFindPasswd}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    label=\"비밀번호\"\n                                    name=\"memberPw\"\n                                    value={passwdForm.memberPw}\n                                    type={showMemberPw ? \"text\" : \"password\"} // 비밀번호 가시성 토글\n                                    fullWidth\n                                    required\n                                    helperText={showHelperText ? \"※ 영문자, 숫자, 특수문자 포함해서 9자 이상 작성하세요.\" : \"\"}\n                                    onChange={changeTextField}\n                                    onBlur={memberPwBlur}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <Button onClick={toggleShowMemberPw}>\n                                                    {showMemberPw ? <VisibilityOff/> : <Visibility/>}\n                                                </Button>\n                                            </InputAdornment>\n                                        )\n                                    }}\n                                />\n                            </Grid>\n                            <Typography\n                                name='memberPw-validation'\n                                id='memberPw-validation'\n                                component='p'\n                                variant='string'\n                                style={{display: 'none', color: 'red', marginTop: '0.5rem', marginLeft: '1.05rem'}}>\n                                비밀번호는 특수문자, 영문자, 숫자 조합의 9자리 이상으로 지정하세요.\n                            </Typography>\n                            <Grid item xs={12}>\n                                <TextField\n                                    label=\"비밀번호 확인\"\n                                    name=\"memberPwCheck\"\n                                    type={showMemberPw ? \"text\" : \"password\"} // 비밀번호 가시성 토글\n                                    fullWidth\n                                    required\n                                    onChange={changeTextField} // 수정된 핸들러 사용\n                                />\n                            </Grid>\n                            <Typography\n                                name='memberPw-check-success'\n                                id='memberPw-check-success'\n                                component='p'\n                                variant='string'\n                                style={{display: 'none', color: 'green', marginTop: '0.5rem', marginLeft: '1.05rem'}}>\n                                비밀번호가 일치합니다.\n                            </Typography>\n                            <Typography\n                                name='memberPw-check-fail'\n                                id='memberPw-check-fail'\n                                component='p'\n                                variant='string'\n                                style={{display: 'none', color: 'red', marginTop: '0.5rem', marginLeft: '1.05rem'}}>\n                                비밀번호가 일치하지 않습니다.\n                            </Typography>\n                        </Grid>\n                        <ButtonComponent prev={'변경'} next={'취소'} onSubmit={handleSubmit} onPrev={handlePrev}/>\n                    </form>\n                </Container>\n            </FindBlock>\n        </CenteredContainer>\n    );\n};\n\nexport default ModifyPasswd;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/etc2_find/ModifyPasswd.js b/src/pages/etc2_find/ModifyPasswd.js
--- a/src/pages/etc2_find/ModifyPasswd.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/etc2_find/ModifyPasswd.js	(date 1730965376200)
@@ -4,7 +4,7 @@
 import styled from "styled-components";
 import ButtonComponent from "../../components/etc2_join/ButtonComponent";
 import {useNavigate} from "react-router-dom";
-import {modifyPasswd} from "../../apis/etc2_memberapis/memberApis";
+import {modifyPasswd} from "../../apis/memberapis/memberApis";
 import {useDispatch} from "react-redux";
 
 const FindBlock = styled.div`
Index: src/pages/oauth2test/KakaoLogin.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {useRecoilState} from \"recoil\";\nimport {userInfoState} from './userInfoState';\nimport \"./KakaoLogin.css\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {kakaoJwtToken} from \"../../apis/etc2_memberapis/memberApis\";\nimport styled from \"styled-components\";\n\nconst CenteredContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n`\n\nfunction KakaoLogin() {\n\n    const dispatch = useDispatch();\n    const navi = useNavigate();\n\n    // Access Token 받아오기\n    useEffect(() => {\n        // URL에서 'code' 파라미터를 추출\n        const params = new URLSearchParams(window.location.search);\n        const code = params.get('code');\n\n        const fetchData = async() => {\n            if (code) {\n                // 백엔드로 인가 코드 전송\n                await dispatch(kakaoJwtToken(code));\n                navi(\"/\");\n            }\n        }\n\n        fetchData();\n\n    }, [dispatch, navi]);\n\n    return (\n        <CenteredContainer>\n            <div className=\"loader\"></div>\n        </CenteredContainer>\n    )\n}\n\nexport default KakaoLogin;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/oauth2test/KakaoLogin.js b/src/pages/oauth2test/KakaoLogin.js
--- a/src/pages/oauth2test/KakaoLogin.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/oauth2test/KakaoLogin.js	(date 1730965376259)
@@ -5,7 +5,7 @@
 import {userInfoState} from './userInfoState';
 import "./KakaoLogin.css"
 import {useDispatch, useSelector} from "react-redux";
-import {kakaoJwtToken} from "../../apis/etc2_memberapis/memberApis";
+import {kakaoJwtToken} from "../../apis/memberapis/memberApis";
 import styled from "styled-components";
 
 const CenteredContainer = styled.div`
Index: src/components/Layout/Header.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useCallback, useEffect, useLayoutEffect, useState} from 'react';\nimport '../../css/Layout/Header.css';\nimport '../../css/Layout/MediaQuery.css';\nimport '../../css/Layout/Wallet.css';\nimport Alarm from '../Layout/Alarm';\nimport logo from '../../images/logo.svg';\nimport axios from 'axios';\nimport rightArrowIcon from '../../images/right_arrow_icon.svg';\nimport hamburgerIcon from '../../images/hamburger_icon.svg';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport HeaderSearchBar from '../Search/HeaderSearchBar'\nimport {checkLogin, getAccessToken, getTokenAndType, getType, logout} from \"../../apis/etc2_memberapis/memberApis\";\nimport searchLogo from '../../images/search_icon.svg';\nimport profileDefault from '../../images/profile_default.jpg';\n\nconst Header = () => {\n\n    const dispatch = useDispatch();\n    const navi = useNavigate();\n\n    const [memberInfo, setMemberInfo] = useState(null);\n    const memberIndex = useSelector((state) => state.memberSlice.memberIndex);\n\n    useEffect(() => {\n        // API 호출 함수\n        const fetchMemberInfo = async () => {\n            try {\n                const response = await axios.get(`${process.env.REACT_APP_BACK_SERVER}/mypage/userInfo/${memberIndex}`,\n                    {withCredentials : true}\n                );\n                setMemberInfo(response.data.item); // 응답에서 멤버 정보 저장\n            } catch (error) {\n                console.error(\"Error fetching member info:\", error); // 오류 처리\n            }\n        };\n\n        if (memberIndex) {\n            fetchMemberInfo(); // memberIndex가 있을 때만 호출\n        }\n    }, [memberIndex]);\n\n    const bucketName = process.env.REACT_APP_BUCKET_NAME;\n    const member = useSelector((state) => state.memberSlice);\n    const accountDto = useSelector((state) => state.memberSlice.accountDto);\n\n    const [profileImageDto, setProfileImageDto] = useState(member.profileImageDto);\n\n    const imageSrc = profileImageDto && profileImageDto.filepath && profileImageDto.newfilename\n        ? `https://kr.object.ncloudstorage.com/${bucketName}/${profileImageDto.filepath}${profileImageDto.newfilename}`\n        : '/default_profile.png'; // 기본 이미지 경로 설정\n\n    useEffect(() => {\n        setProfileImageDto(member.profileImageDto);\n    }, [member.profileImageDto]);\n\n    const [boxHeight, setBoxHeight] = useState('auto'); // 초기 높이 설정\n    const [showWalletPopup, setShowWalletPopup] = useState(false); // 지갑 팝업 상태\n\n\n    const handleMouseOver = (e) => {\n        document.querySelector(\".HDnavbarMenuDetailBox\").style.display = 'block';\n    }\n\n    const handleMouseLeave = (e) => {\n        document.querySelector(\".HDnavbarMenuDetailBox\").style.display = 'none';\n        document.querySelector(\".HDnavbarMenuDetailCategory\").style.display = 'none';\n        setBoxHeight('auto')\n    };\n\n    const handleMouseOverCate = (e) => {\n        document.querySelector(\".HDarrowIcon\").style.opacity = '1';\n    }\n\n    const handleMouseLeaveCate = (e) => {\n        document.querySelector(\".HDarrowIcon\").style.opacity = '0';\n    }\n\n    const handleMouseOverWallet = () => {\n        setShowWalletPopup(true);\n    };\n\n    const handleMouseLeaveWallet = () => {\n        setShowWalletPopup(false);\n    };\n\n    let clickCate = true;\n\n    const handleMouseClick = (e) => {\n        if (clickCate) {\n            document.querySelector(\".HDnavbarMenuDetailCategory\").style.display = 'flex'\n            setBoxHeight('385px')\n            clickCate = false;\n        } else {\n            document.querySelector(\".HDnavbarMenuDetailCategory\").style.display = 'none'\n            setBoxHeight('auto')\n            clickCate = true;\n        }\n    }\n\n    // 로고 클릭 시 메인 페이지로 이동\n    const handleLogoClick = () => {\n        window.location.href = '/';  // mainpage로 페이지 이동\n    };\n\n    // 충전, 환전 클릭 시 마이 페이지로 이동\n    const handleChargeBttnClick = () => {\n        window.location.href = '/mypage/wallet';  // mainpage로 페이지 이동\n    };\n\n    const handleChargeCategory = () => {\n        window.location.href = '/category';  // /category로 이동\n    };\n\n    const handleMypage = () => {\n        window.location.href = '/mypage/userInfo'; \n    }\n\n    const handleWallet = () => {\n        window.location.href = '/mypage/wallet';\n    }\n\n    const handleToSearch = () => {\n        window.location.href = '/search';\n    }\n\n    const toCategory = () => {\n        window.location.href ='/category';\n    }\n  \n    const toAll = () => {\n      window.location.href ='/category/all';\n      };\n  \n    const toClothing = () => {\n      window.location.href ='/category/clothing';\n      };\n  \n    const toHob = () => {\n      window.location.href ='/category/hob';\n      };\n      \n    const toBook = () => {\n      window.location.href ='/category/book';\n      };\n    \n    const toArt = () => {\n      window.location.href ='/category/art';\n      };\n  \n    const toElec = () => {\n      window.location.href = '/category/elec';\n      };\n  \n    const toPic = () => {\n      window.location.href = '/category/pic';\n      };\n    \n    const toAntique = () => {\n      window.location.href = '/category/antique';\n      };\n\n    const [token, setToken] = useState(null);\n\n    const oauthType = useSelector(state => state.memberSlice.oauthType);\n    const checkLoginState = useSelector(state => state.memberSlice.checkLoginState);\n    const nickname = useSelector(state => state.memberSlice.nickname);\n\n    useLayoutEffect(() => {\n        const fetchLoginStatus =  () => {\n             dispatch(checkLogin());\n\n            if (checkLoginState) {\n                setToken(true);\n            } else {\n                setToken(false);\n            }\n        };\n\n        fetchLoginStatus();\n    }, [checkLoginState]);\n\n    const handleLogout = useCallback(async () => {\n\n        try {\n            await dispatch(logout());\n            setToken(false);\n        } catch (e) {\n            alert(\"로그아웃 실패\");\n        }\n\n        if (oauthType === \"Kakao\") {\n            const kakaoLogoutParams = {\n                client_id: \"29e81fa9fda262c573f312af9934fa5c\",\n                logout_redirect_uri: process.env.REACT_APP_FRONT_SERVER\n            }\n\n            const url = 'https://kauth.kakao.com/oauth/logout';\n            window.location.href = `${url}?client_id=${kakaoLogoutParams.client_id}&logout_redirect_uri=${kakaoLogoutParams.logout_redirect_uri}`;\n        }\n        window.location.href = '/';\n\n    }, [dispatch, oauthType]);\n\n    return (\n        <>\n            <header>\n                <nav className=\"HDnavbar\">\n                    <div className=\"HDnavbarLogo\" onClick={handleLogoClick}>\n                        <img src={logo} alt=\"navbarLogo\"></img>\n                    </div>\n                    <div className=\"HDnavbarMenuWrapper\" onMouseOver={handleMouseOver}\n                         onMouseLeave={handleMouseLeave}>\n                        <ul className=\"HDnavbarMenu\">\n                            <li className=\"HDnavbarMenuItem\">\n                                <a href='#'>특수경매</a>\n                            </li>\n                            <li className=\"HDnavbarMenuItem\" onClick={handleChargeCategory}>\n                                <a href='#'>일반경매</a>\n                            </li>\n                            <li className=\"HDnavbarMenuItem\"><a href=\"/registration\">물품등록</a></li>\n                        </ul>\n\n                        <div className=\"HDnavbarMenuDetailBox\" onMouseOver={handleMouseOver}\n                             onMouseLeave={handleMouseLeave} style={{height: boxHeight}}>\n                            <div className='HDnavbarMenuDetailFlex'>\n                                <ul className=\"HDnavbarMenuDetail\">\n                                    <li><a href=\"/specialAuction\">실시간</a></li>\n                                    <li><a href=\"/specialAuction\">블라인드</a></li>\n                                </ul>\n                                <ul className=\"HDnavbarMenuDetail\">\n                                    <li><a href=\"#\">전체보기</a></li>\n                                    <li id='HDnavbarMenuDetailCate' onClick={handleMouseClick}\n                                        onMouseOver={handleMouseOverCate} onMouseLeave={handleMouseLeaveCate}><a\n                                        href='#'>카테고리</a></li>\n                                </ul>\n                                <div className='HDarrowIcon'>\n                                    <img src={rightArrowIcon}></img>\n                                </div>\n                                <div className=\"HDnavbarMenuDetailCategoryBox\">\n                                    <ul className=\"HDnavbarMenuDetailCategory\">\n                                        <li onClick={toClothing} style={{ cursor:'pointer'}}><a href=\"#\">의류/잡화</a></li>\n                                        <li onClick={toHob}><a href=\"#\">취미/수집</a></li>\n                                        <li onClick={toBook}><a href=\"#\">도서</a></li>\n                                        <li onClick={toArt}><a href=\"#\">예술품</a></li>\n                                        <li onClick={toElec}><a href=\"#\">전자제품</a></li>\n                                        <li onClick={toPic}><a href=\"#\">사진</a></li>\n                                        <li onClick={toAntique}><a href=\"#\">골동품</a></li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/*<div className=\"HDnavbarSearchbar\">*/}\n                    {/*    <input type=\"text\"></input>*/}\n                    {/*</div>*/}\n                    {/* <img \n                        onClick={handleToSearch}\n                        src={searchLogo} // 이미지 주소를 src로 설정\n                        alt=\"검색\" // 대체 텍스트 추가\n                        style={{\n                            display: 'flex',\n                            width: '30px',\n                            height: '30px',\n                            justifyContent: 'center',\n                            alignContent: 'center',\n                            alignItems: 'center',\n                            backgroundRepeat: 'no-repeat',\n                        }}\n                    />\n                    <div style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center'\n                    }}>\n                        검색\n                    </div> */}\n                    <HeaderSearchBar />\n                    {\n                        token ?\n                            <>\n                                <ul className=\"HDnavbarMember\">\n                                    <li><a onClick={handleLogout}>로그아웃</a></li>\n                                </ul>\n                                <div className=\"HDnavbarAlarm\" style={{marginRight: '40px', position: 'relative'}}\n                                    onMouseOver={handleMouseOverWallet}\n                                    onMouseLeave={handleMouseLeaveWallet}\n                                    >\n                                    <img\n                                        src={profileImageDto ? imageSrc : profileDefault}\n                                        alt=\"My Page\"\n                                        style={{ cursor: 'pointer', border: '1px solid #cdcdcd', borderRadius: '50%' }}\n                                        onClick={handleMypage}\n                                    />\n\n                                    {showWalletPopup && (\n                                        <div className=\"HDwalletPopup\">\n                                            <h3>지갑</h3>\n                                            <div className=\"HDwalletAmount\">\n                                                <p>금액</p>\n                                                <p>{Number(accountDto.userMoney).toLocaleString()} 원</p>\n                                            </div>\n                                            <div className=\"HDwalletButtons\">\n                                                <button onClick={handleChargeBttnClick}>지갑 관리</button>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            </>\n                            :\n                            <>\n                                <ul className=\"HDnavbarMember\">\n                                    <li><a href=\"/login\">로그인</a></li>\n                                    <li><a href=\"/join\">회원가입</a></li>\n                                </ul>\n                            </>\n                    }\n                    <Alarm/>\n                    <a href=\"#\" className=\"HDnavbarToggleBtn\">\n                        <img src={hamburgerIcon} alt=\"hamburger_icon\"></img>\n                    </a>\n                </nav>\n            </header>\n        </>\n    );\n};\n\nexport default Header;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Layout/Header.js b/src/components/Layout/Header.js
--- a/src/components/Layout/Header.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/components/Layout/Header.js	(date 1730965376279)
@@ -10,7 +10,7 @@
 import {useDispatch, useSelector} from "react-redux";
 import {useNavigate} from "react-router-dom";
 import HeaderSearchBar from '../Search/HeaderSearchBar'
-import {checkLogin, getAccessToken, getTokenAndType, getType, logout} from "../../apis/etc2_memberapis/memberApis";
+import {checkLogin, getAccessToken, getTokenAndType, getType, logout} from "../../apis/memberapis/memberApis";
 import searchLogo from '../../images/search_icon.svg';
 import profileDefault from '../../images/profile_default.jpg';
 
Index: src/pages/oauth2test/NaverLogin.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\n// import axios from \"axios\";\n// import {useRecoilState} from \"recoil\";\n// import {userInfoState} from './userInfoState';\nimport \"./KakaoLogin.css\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {kakaoJwtToken, naverJwtToken} from \"../../apis/etc2_memberapis/memberApis\";\nimport styled from \"styled-components\";\n\nconst CenteredContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n`\n\nfunction NaverLogin() {\n\n    const dispatch = useDispatch();\n    const navi = useNavigate();\n\n    // Access Token 받아오기\n    // Access Token 받아오기\n    useEffect(() => {\n        // URL에서 'code' 파라미터를 추출\n        const params = new URLSearchParams(window.location.search);\n        const code = params.get('code');\n\n        const fetchData = async() => {\n            if (code) {\n                // 백엔드로 인가 코드 전송\n                await dispatch(naverJwtToken(code));\n                navi(\"/\");\n            }\n        }\n\n        fetchData();\n\n    }, [dispatch, navi]);\n\n    return (\n        <CenteredContainer>\n            <div className=\"loader\"></div>\n        </CenteredContainer>\n    )\n}\n\nexport default NaverLogin;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/oauth2test/NaverLogin.js b/src/pages/oauth2test/NaverLogin.js
--- a/src/pages/oauth2test/NaverLogin.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/oauth2test/NaverLogin.js	(date 1730965376273)
@@ -5,7 +5,7 @@
 // import {userInfoState} from './userInfoState';
 import "./KakaoLogin.css"
 import {useDispatch, useSelector} from "react-redux";
-import {kakaoJwtToken, naverJwtToken} from "../../apis/etc2_memberapis/memberApis";
+import {kakaoJwtToken, naverJwtToken} from "../../apis/memberapis/memberApis";
 import styled from "styled-components";
 
 const CenteredContainer = styled.div`
Index: src/pages/oauth2test/GoogleLogin.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from \"react\";\nimport {useNavigate} from \"react-router-dom\";\nimport axios from \"axios\";\nimport {useRecoilState} from \"recoil\";\nimport {userInfoState} from './userInfoState';\nimport \"./KakaoLogin.css\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {googleJwtToken, kakaoJwtToken} from \"../../apis/etc2_memberapis/memberApis\";\nimport styled from \"styled-components\";\n\nconst CenteredContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n`\n\nfunction GoogleLogin() {\n\n    const dispatch = useDispatch();\n    const navi = useNavigate();\n\n    // Access Token 받아오기\n    useEffect(() => {\n        // URL에서 'code' 파라미터를 추출\n        const params = new URLSearchParams(window.location.search);\n        const code = params.get('code');\n\n    }, [dispatch, navi]);\n\n    useEffect(() => {\n        const hash = window.location.hash;\n        const login = async () => {\n            if (hash) {\n                const accessToken = new URLSearchParams(hash.slice(1)).get('access_token');\n                if (accessToken) {\n                    // 여기에 토큰을 처리하는 로직을 추가하세요\n                    console.log('Access Token:', accessToken);\n                    // 예: API 요청이나 상태 관리에 토큰 저장\n                    await dispatch(googleJwtToken(accessToken));\n                }\n                navi(\"/\");\n            }\n        };\n\n        login();\n\n    }, [dispatch, navi]);\n\n    return (\n        <CenteredContainer>\n            <div className=\"loader\"></div>\n        </CenteredContainer>\n    )\n}\n\nexport default GoogleLogin;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/oauth2test/GoogleLogin.js b/src/pages/oauth2test/GoogleLogin.js
--- a/src/pages/oauth2test/GoogleLogin.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/oauth2test/GoogleLogin.js	(date 1730965376195)
@@ -5,7 +5,7 @@
 import {userInfoState} from './userInfoState';
 import "./KakaoLogin.css"
 import {useDispatch, useSelector} from "react-redux";
-import {googleJwtToken, kakaoJwtToken} from "../../apis/etc2_memberapis/memberApis";
+import {googleJwtToken, kakaoJwtToken} from "../../apis/memberapis/memberApis";
 import styled from "styled-components";
 
 const CenteredContainer = styled.div`
Index: src/pages/etc2_login/Login.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useCallback, useEffect, useState} from 'react';\nimport {\n    Button,\n    Checkbox,\n    Container,\n    FormControlLabel,\n    Grid,\n    InputAdornment,\n    TextField,\n    Typography\n} from '@mui/material';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {login} from '../../apis/etc2_memberapis/memberApis';\nimport {useNavigate} from 'react-router-dom';\nimport styled from \"styled-components\";\nimport {Visibility, VisibilityOff} from \"@mui/icons-material\";\nimport '../../css/Login.css';\n\n\nconst LoginBlock = styled.div`\n    display: flex;\n    width: 25rem;\n    border-radius: 10px;\n    background-color: #f1f1f1;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n    border: 1px solid #cdcdcd;\n`;\n\nconst CenteredContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n`\n\nconst HeaderTitle = styled.div`\n    font-size: 2rem;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 30px;\n`\n\nconst Login = () => {\n\n    const [loginForm, setLoginForm] = useState({\n        memberId: '',\n        memberPw: '',\n        rememberMe: false\n    });\n    const [showMemberPw, setShowMemberPw] = useState(false);\n\n\n    const dispatch = useDispatch();\n    const navi = useNavigate();\n\n    const checkLoginState = useSelector(state => state.memberSlice.checkLoginState);\n\n    useEffect(() => {\n\n        if(checkLoginState){\n            alert(\"이미 로그인 되어 있습니다.\");\n            navi(\"/\");\n        }\n\n    }, [checkLoginState, loginForm]);\n\n    const changeTextField = useCallback((e) => {\n        const { name, value } = e.target;\n\n        setLoginForm((prev) => ({\n            ...prev,\n            [name]: name === 'rememberMe' ? !prev.rememberMe : value, // 체크박스 반전\n        }));\n    }, []);\n\n    const handleLogin = useCallback(async (e) => {\n        e.preventDefault();\n\n        const resultAction = await dispatch(login(loginForm));\n\n        if (login.fulfilled.match(resultAction)) {\n            navi(\"/\");\n        } else {\n            // 로그인 실패 처리 (예: 에러 메시지 표시 등)\n            console.error(\"로그인 실패:\", resultAction.error.message);\n        }\n\n    }, [loginForm, dispatch, navi]);\n\n\n    const toggleShowMemberPw = () => {\n        setShowMemberPw((prev) => !prev);\n    };\n\n\n    const kakao_api_key = process.env.REACT_APP_KAKAO_API_KEY //REST API KEY\n    const kakao_redirect_uri = process.env.REACT_APP_KAKAO_REDIRECT_URI + `/auth/kakao/callback` //Redirect URI\n    // oauth 요청 URL\n    const kakaoURL = `https://kauth.kakao.com/oauth/authorize?client_id=` + kakao_api_key + `&redirect_uri=` + kakao_redirect_uri + `&response_type=code`\n\n\n    const naver_api_key = process.env.REACT_APP_NAVER_API_KEY //REST API KEY\n    const naver_redirect_uri = process.env.REACT_APP_NAVER_REDIRECT_URI + '/auth/naver/callback' //Redirect URI\n    const state = 1234;\n    const naverURL = `https://nid.naver.com/oauth2.0/authorize?client_id=` + naver_api_key + `&response_type=code&redirect_uri=` + naver_redirect_uri + `&state=${state}`\n\n    const google_api_key = process.env.REACT_APP_GOOGLE_API_KEY\n    const google_redirect_uri = process.env.REACT_APP_GOOGLE_REDIRECT_URI + '/auth/google/callback' //Redirect URI\n    // const state = 1234;\n    const googleURL = `https://accounts.google.com/o/oauth2/v2/auth?` +\n        `client_id=` + google_api_key +\n        `&redirect_uri=` + google_redirect_uri +\n        `&response_type=token&` +\n        `scope=https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile`;\n    const handleKakaoLogin = () => {\n        window.location.href = kakaoURL\n    }\n\n    const handleNaverLogin = () => {\n        window.location.href = naverURL\n    }\n\n    const handleGoogleLogin = () => {\n        window.location.href = googleURL\n    }\n\n\n\n\n    return (\n        <CenteredContainer>\n            <LoginBlock>\n                <form onSubmit={handleLogin}>\n                    <Container maxWidth=\"sm\" sx={{mt: 5}}>\n                        <HeaderTitle sx={{ fontFamily: 'IBM Plex Sans KR, sans-serif' }}>로그인</HeaderTitle>\n                        <Grid item xs={12} textAlign='right' style={{marginBottom: \"15px\"}}>\n                            <TextField\n                                name='memberId'\n                                variant='outlined'\n                                required\n                                id='memberId'\n                                label='아이디'\n                                autoFocus\n                                fullWidth\n                                value={loginForm.memberId}\n                                onChange={changeTextField}\n                                InputLabelProps={{\n                                    sx: { fontFamily: 'IBM Plex Sans KR, sans-serif' } // 라벨에 폰트 적용\n                                  }}\n                                  InputProps={{\n                                    sx: { fontFamily: 'IBM Plex Sans KR, sans-serif' } // 입력 텍스트에 폰트 적용\n                                  }}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                name='memberPw'\n                                variant='outlined'\n                                required\n                                id='memberPw'\n                                label='비밀번호'\n                                fullWidth\n                                type={showMemberPw ? \"text\" : \"password\"} // 비밀번호 가시성 토글\n                                value={loginForm.memberPw}\n                                onChange={changeTextField}\n                                InputLabelProps={{\n                                    sx: { fontFamily: 'IBM Plex Sans KR, sans-serif' } // 라벨에 폰트 적용\n                                  }}\n                                  InputProps={{\n                                    sx: { fontFamily: 'IBM Plex Sans KR, sans-serif' }, // 입력 텍스트에 폰트 적용\n                                  }}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Button onClick={toggleShowMemberPw}>\n                                                {showMemberPw ? <VisibilityOff/> : <Visibility/>}\n                                            </Button>\n                                        </InputAdornment>\n                                    )\n                                }}\n                            />\n                        </Grid>\n                        <Grid>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        checked={loginForm.rememberMe}\n                                        onChange={changeTextField}\n                                        name='rememberMe'\n                                    />\n                                }\n                                label=\"로그인 상태 유지\"\n                                sx={{\n                                    '& .MuiFormControlLabel-label': {\n                                      fontFamily: 'IBM Plex Sans KR, sans-serif', // 폰트 설정\n                                      fontSize: '14px', // 폰트 크기 설정\n                                      color: 'black', // 텍스트 색상 설정\n                                    }\n                                  }}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                type=\"submit\" // type을 submit으로 설정\n                                sx={{\n                                    margin: '10px 0',\n                                    backgroundColor: \"#DDDDDD\",\n                                    height: \"43px\",\n                                    fontSize: \"18px\",\n                                    fontWeight: '900',\n                                    color: '#444',\n                                    fontFamily: 'IBM Plex Sans KR, sans-serif', // 폰트 설정\n                                    transition: 'all 0.3s ease-in-out',\n                                    '&:hover': {\n                                        backgroundColor: \"#0A369D\", // hover 시 배경색 변경\n                                        color: 'white'\n                                    }\n                                }}\n                                fullWidth\n                            >\n                                로그인\n                            </Button>\n                        </Grid>\n                        <Grid className=\"joinFindContainer\">\n                            <a href={\"/join\"} className=\"joinFindButton\">\n                                <p style={{fontSize: '16px', fontWeight: '600'}}>회원가입</p>\n                            </a>\n                            <div className=\"vertical-line\"></div>\n                            <a href={\"/find\"} className=\"joinFindButton\">\n                                <p style={{fontSize: '16px', fontWeight: '600'}}>계정찾기</p>\n                            </a>\n                        </Grid>\n                        <Grid container justifyContent=\"center\" alignItems=\"center\"\n                              style={{marginTop: '40px', borderTop: '1px solid #777'}}>\n                            <Typography style={{margin: '20px 0', color: '#777', fontWeight: '900'}}>\n                                <p style={{fontSize: '16px', fontWeight: '600'}}>소셜로 로그인</p>\n                            </Typography>\n                        </Grid>\n                        <Grid container justifyContent=\"center\" alignItems=\"center\">\n                            <div className=\"circle\" style={{cursor: 'pointer'}}>\n                                <img src=\"/images/logo/kakao.png\" alt=\"샘플 이미지\" onClick={handleKakaoLogin}/>\n                            </div>\n                            <div className=\"circle\" style={{cursor: 'pointer'}}>\n                                <img src=\"/images/logo/naver.png\" alt=\"샘플 이미지\" onClick={handleNaverLogin}/>\n                            </div>\n                            <div className=\"circle\" style={{cursor: 'pointer'}}>\n                                <img src=\"/images/logo/google.png\" alt=\"샘플 이미지\" onClick={handleGoogleLogin}/>\n                            </div>\n                        </Grid>\n                    </Container>\n                </form>\n            </LoginBlock>\n        </CenteredContainer>\n\n\n    )\n        ;\n};\n\nexport default Login;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/etc2_login/Login.js b/src/pages/etc2_login/Login.js
--- a/src/pages/etc2_login/Login.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/etc2_login/Login.js	(date 1730965376270)
@@ -10,7 +10,7 @@
     Typography
 } from '@mui/material';
 import {useDispatch, useSelector} from 'react-redux';
-import {login} from '../../apis/etc2_memberapis/memberApis';
+import {login} from '../../apis/memberapis/memberApis';
 import {useNavigate} from 'react-router-dom';
 import styled from "styled-components";
 import {Visibility, VisibilityOff} from "@mui/icons-material";
Index: src/components/Mypage/MypageSideBar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uploadProfileImage } from '../../apis/etc2_memberapis/memberApis';\nimport '../../css/Mypage/Mypage.css';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport changeIcon from '../../images/change_icon.svg';\nimport memberInfoModify from '../../images/MP_member_info_modify_icon.svg';\nimport myAuctionList from '../../images/MP_my_auction_list_icon.svg';\nimport myAuctionProcess from '../../images/MP_my_auction_process_icon.svg';\nimport myWallet from '../../images/MP_my_wallet_icon.svg';\nimport profileDefault from '../../images/profile_default.jpg';\n\nconst MypageSideBar = ({ memberInfo }) => {\n\n  const bucketName = process.env.REACT_APP_BUCKET_NAME;\n  const member = useSelector((state) => state.memberSlice);\n  const dispatch = useDispatch(); // dispatch 함수 추가\n  const [profileImageDto, setProfileImageDto] = useState(member.profileImageDto);\n  const [loading, setLoading] = useState(false);\n  const navi = useNavigate();\n\n  // 프로필 이미지가 없으면 기본 이미지를 사용하도록 조건 추가\n  const imageSrc = profileImageDto && profileImageDto.filepath && profileImageDto.newfilename\n    ? `https://kr.object.ncloudstorage.com/${bucketName}/${profileImageDto.filepath}${profileImageDto.newfilename}`\n    : '/default_profile.png'; // 기본 이미지 경로 설정\n\n  useEffect(() => {\n    setProfileImageDto(member.profileImageDto);\n  }, [member.profileImageDto]);\n\n  const handleImageChange = async (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('profileImage', file);\n      formData.append('memberIndex', member.memberIndex);\n\n      try {\n        setLoading(true);\n        // uploadProfileImage 액션을 디스패치하여 이미지 업로드\n        const actionResult = await dispatch(uploadProfileImage(formData));\n\n        // 성공적으로 업로드되었는지 확인\n        if (uploadProfileImage.fulfilled.match(actionResult)) {\n          setProfileImageDto(actionResult.payload); // local state 업데이트\n        } else {\n          console.error('프로필 이미지 업로드 오류:', actionResult.payload);\n        }\n      } catch (error) {\n        console.error('Failed to upload profile image:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  const handleProfileImageClick = () => document.getElementById('profileImageInput').click();\n\n  const handleProfileClick =() => {\n    window.location.href = '/mypage/userInfo';\n  }\n\n  const handleAuctionClick =() => {\n    window.location.href = '/mypage/auctionInfo';\n  }\n\n  const handleWalletClick =() => {\n    window.location.href = '/mypage/wallet';\n  }\n\n  const handleQnaClick =() => {\n    window.location.href = '/mypage/qna';\n  }\n\n  const handleSellerClick =() => {\n    window.location.href = '/mypage/sellerInfo';\n  }\n\n  const handleManagement = () => {\n    window.location.href = '/mypage/auctionmanagement';\n  }\n\n  return (\n      <div className='Mypage_SideBarContainer'>\n          <div className='Mypage_SideBarProfile'>\n              <div className='Mypage_ProfileImgContainer' onClick={handleProfileImageClick}>\n                  <img\n                      className='Mypage_ProfileImg'\n                      src={profileImageDto ? imageSrc : profileDefault}\n                      alt=\"Profile\"\n                  />\n                  <div className='Mypage_ProfileImgModifyBtn'><img></img></div>\n                  <input\n                      type=\"file\"\n                      id=\"profileImageInput\"\n                      style={{ display: 'none' }}\n                      accept=\"image/*\"\n                      onChange={handleImageChange}\n                  />\n              </div>\n              <div className='Mypage_ProfileUserName'>\n                  {/* 여기에 사용자 이름을 표시할 수 있습니다 */}\n              </div>\n          </div>\n          <div className='Mypage_SideBarCategory'>\n              <div className='Mypage_SideBarCategory_List_Box'>\n                  <div>\n                      <h2>마이페이지 목록</h2>\n                  </div>\n                  <div className='Mypage_SideBarCategory_List'>\n                      <div onClick={handleProfileClick} style={{ cursor: 'pointer' }}>\n                          <img src={memberInfoModify} alt=\"내 프로필\" />\n                          <p>내 프로필</p>\n                      </div>\n                      <div onClick={handleManagement} style={{ cursor: 'pointer' }}>\n                          <img src={myAuctionList} alt=\"내가 등록한 경매\" />\n                          <p>내가 등록한 경매</p>\n                      </div>\n                      <div onClick={handleAuctionClick} style={{ cursor: 'pointer' }}>\n                          <img src={myAuctionProcess} alt=\"참여중인 경매\" />\n                          <p>참여중인 경매</p>\n                      </div>\n                      <div id='remove_wallet_margin' onClick={handleWalletClick} style={{ cursor: 'pointer' }}>\n                          <img src={myWallet} alt=\"지갑 관리\" />\n                          <p>지갑 관리</p>\n                      </div>\n                  </div>\n              </div>\n          </div>\n      </div>\n  );\n}\n\nexport default MypageSideBar
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Mypage/MypageSideBar.js b/src/components/Mypage/MypageSideBar.js
--- a/src/components/Mypage/MypageSideBar.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/components/Mypage/MypageSideBar.js	(date 1730965376203)
@@ -1,6 +1,6 @@
 import React, { useEffect, useState } from 'react';
 import { useDispatch, useSelector } from 'react-redux';
-import { uploadProfileImage } from '../../apis/etc2_memberapis/memberApis';
+import { uploadProfileImage } from '../../apis/memberapis/memberApis';
 import '../../css/Mypage/Mypage.css';
 import { useNavigate } from 'react-router-dom';
 import axios from 'axios';
Index: src/pages/etc2_join/JoinToken.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import styled from \"styled-components\";\nimport {useNavigate} from \"react-router-dom\";\nimport React, {useCallback, useState} from \"react\";\nimport {Button} from \"@mui/material\";\nimport CheckBoxComponent from \"../../components/etc2_join/CheckBoxComponent\";\nimport {oauthLogin} from \"../../apis/etc2_memberapis/memberApis\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst JoinBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 1200px;\n    margin: 0 auto;\n    height: 100vh;\n    position: relative;\n    padding: 60px 0; /* 상하 여백 추가 */\n`;\n\nconst StyledText = styled.div`\n    font-size: 3rem;\n    color: #444;\n    text-align: left;\n    margin-top: 30px;\n    border-bottom: 2px solid #444;\n    padding-bottom: 5px;\n`;\n\nconst HeaderTitle = styled.div`\n    font-size: 3rem;\n    font-weight: bold;\n    text-align: center;\n    margin-bottom: 10px;\n`\n\nconst JoinToken = () => {\n\n    const navi = useNavigate();\n    const dispatch = useDispatch();\n    const [checked, setChecked] = useState(Array(7).fill(false));\n    const [checkedIndices, setCheckedIndices] = useState([]);\n\n    const handleCheckedChange = (indices) => {\n        setCheckedIndices(indices);\n    };\n\n    const oauthToken = useSelector(state => state.memberSlice.oauthToken);\n\n    const handleJoin = () => {\n\n        // 체크된 인덱스가 [0, 1, 2, 3, 4]인지 확인\n        const requiredIndices = [0, 1, 2, 3, 4];\n\n        // checkedIndices가 requiredIndices와 정확히 일치하는지 확인\n        const isValid = requiredIndices.every(index => checkedIndices.includes(index));\n\n        if (isValid) {\n            const userConfirmed = window.confirm(\"회원가입을 하시겠습니까?\");\n\n            if (userConfirmed) {\n                // dispatch(oauthLogin());\n                navi('/'); // 조건이 충족되면 네비게이션\n            } else {\n                return;\n            }\n\n        } else {\n            alert(\"필수 항목에 동의해 주세요.\"); // 조건이 충족되지 않으면 경고 메시지\n        }\n    };\n\n\n    return (\n        <JoinBlock>\n            <HeaderTitle>회원가입</HeaderTitle>\n            <CheckBoxComponent checked={checked} setChecked={setChecked} onCheckedChange={handleCheckedChange}/>\n            <Button\n                name=\"transport-button\"\n                variant=\"contained\"\n                type=\"submit\"\n                style={{\n                    backgroundColor: \"#2196F3\",\n                    height: \"43px\",\n                    fontSize: \"18px\",\n                    width: \"300px\",\n                    marginTop: \"30px\"\n                }}\n\n                id='emailButton'\n                onClick={handleJoin}\n            >\n                회원가입\n            </Button>\n        </JoinBlock>\n    );\n};\n\nexport default JoinToken;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/etc2_join/JoinToken.js b/src/pages/etc2_join/JoinToken.js
--- a/src/pages/etc2_join/JoinToken.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/pages/etc2_join/JoinToken.js	(date 1730965376248)
@@ -3,7 +3,7 @@
 import React, {useCallback, useState} from "react";
 import {Button} from "@mui/material";
 import CheckBoxComponent from "../../components/etc2_join/CheckBoxComponent";
-import {oauthLogin} from "../../apis/etc2_memberapis/memberApis";
+import {oauthLogin} from "../../apis/memberapis/memberApis";
 import {useDispatch, useSelector} from "react-redux";
 
 const JoinBlock = styled.div`
Index: src/customHooks/useNotificationWebSocket.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addNotification } from '../slices/notification/notificationSlice';\nimport { fetchMember } from '../apis/etc2_memberapis/memberApis';\n\nconst useNotificationWebSocket = () => {\n  const [notifications, setNotifications] = useState([]);\n  const memberIndex = useSelector((state) => state.memberSlice.memberIndex);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const notificationSocket = new SockJS(`${process.env.REACT_APP_BACK_SERVER}/ws-notifications`, null, {\n      withCredentials: true, // 쿠키를 전달할 수 있도록 설정\n    });\n    const notificationClient  = new Client({\n      webSocketFactory: () => notificationSocket,\n      onConnect: () => {\n\n        // 유저별 구독 경로 설정\n        const subscriptionPath = `/topic/notifications/${memberIndex}`;\n        notificationClient.subscribe(subscriptionPath, (message) => {\n          const newNotification = JSON.parse(message.body);\n          setNotifications((prev) => [...prev, newNotification]); // 새로운 알림 추가\n          dispatch(addNotification(newNotification)); // Redux 상태에 추가\n\n          if (newNotification.notificationType === 'HIGHER_BID') {\n            dispatch(fetchMember()); \n          }\n\n          if (newNotification.notificationType === 'AUCTION_WIN') {\n            dispatch(fetchMember()); \n          }\n        });\n      },\n      onStompError: (error) => {\n        console.error(\"Notification WebSocket error:\", error);\n      },\n    });\n\n    notificationClient .activate();\n\n    return () => {\n      notificationClient .deactivate();\n    };\n  }, [notifications, dispatch]);\n\n  return { notifications, setNotifications };\n};\n\nexport default useNotificationWebSocket;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/customHooks/useNotificationWebSocket.js b/src/customHooks/useNotificationWebSocket.js
--- a/src/customHooks/useNotificationWebSocket.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/customHooks/useNotificationWebSocket.js	(date 1730965376217)
@@ -3,7 +3,7 @@
 import { Client } from '@stomp/stompjs';
 import { useDispatch, useSelector } from 'react-redux';
 import { addNotification } from '../slices/notification/notificationSlice';
-import { fetchMember } from '../apis/etc2_memberapis/memberApis';
+import { fetchMember } from '../apis/memberapis/memberApis';
 
 const useNotificationWebSocket = () => {
   const [notifications, setNotifications] = useState([]);
Index: src/components/Mypage/MypageWalletBox.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react'\nimport { MypageWalletRecordBox } from './MypageWalletRecordBox'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { chargeAccount, exchangeAccount, buyAuction, sellAuction } from '../../apis/etc2_memberapis/memberApis'\n\n\nconst MypageWalletBox = () => {\n\n  const dispatch = useDispatch();\n  const [response, setResponse] = useState(null);\n\n  const accountDto = useSelector((state) => state.memberSlice.accountDto);\n\n  // 충전 \n  const handleChargeAccount = async () => {\n    const dummyData = {\n      changeAccount: '5000', // 충전 금액\n      useType: '충전'\n    };\n\n    // dispatch로 chargeAccount 액션 호출\n    const resultAction = await dispatch(chargeAccount(dummyData));\n    if (chargeAccount.fulfilled.match(resultAction)) {\n      setResponse(resultAction.payload);\n    } else {\n      setResponse(`Error: ${resultAction.error.message}`);\n    }\n  };\n\n  // 환전\n  const handleExchangeAccount = async () => {\n    const dummyData = {\n      changeAccount: '2000', // 환전 금액\n      useType: '환전'\n    };\n\n    const resultAction = await dispatch(exchangeAccount(dummyData));\n    if (exchangeAccount.fulfilled.match(resultAction)) {\n      setResponse(resultAction.payload);\n    } else {\n      setResponse(`Error: ${resultAction.error.message}`);\n    }\n  };\n\n  return (  \n    <div className='Mypage_WalletBoxContainer'>\n      <div className='Mypage_UserInfoTitle'>\n        <h2>지갑 관리</h2>\n        </div>\n        <div className='Mypage_WalletInfoContainer'>\n          <div className='Mypage_WalletCredit'>\n            <div>\n              <p>금액</p>\n            </div>\n            <div>\n              <p>{Number(accountDto.userMoney).toLocaleString()} 원</p>\n            </div>\n          </div>\n          {/* <div className='Mypage_WalletBtn'>\n            <div className=''>충전버튼(임시)</div>\n            <div className=''>출금버튼(임시)</div>\n          </div> */}\n        </div>\n        <div className='Mypage_WalletRecordLine'>\n          <div>\n            <h3>결제 및 충전 내역</h3>\n          </div>\n        </div>\n        <div className='Mypage_WalletUsedContainer'>\n        <div className='Mypage_WalletUsed'>\n          {accountDto.accountUseHistoryDtoList && accountDto.accountUseHistoryDtoList.length > 0 ? (\n            <MypageWalletRecordBox records={accountDto.accountUseHistoryDtoList} />\n          ) : (\n            <div className='Mypage_NoRecord'>이용 기록이 없습니다.</div>\n          )}\n        </div>\n        </div>\n        <div className='Mypage_BttnBox'>\n          <button className='Mypage_Bttn' onClick={handleChargeAccount}>충전</button>\n          <button className='Mypage_Bttn' onClick={handleExchangeAccount}>환전</button>\n        </div>\n    </div>\n  )\n}\n\nexport default MypageWalletBox
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Mypage/MypageWalletBox.js b/src/components/Mypage/MypageWalletBox.js
--- a/src/components/Mypage/MypageWalletBox.js	(revision b588fef17969376b7d61935c5a5c4d40ff0607b1)
+++ b/src/components/Mypage/MypageWalletBox.js	(date 1730965376234)
@@ -1,7 +1,7 @@
 import React, { useEffect, useState } from 'react'
 import { MypageWalletRecordBox } from './MypageWalletRecordBox'
 import { useDispatch, useSelector } from 'react-redux';
-import { chargeAccount, exchangeAccount, buyAuction, sellAuction } from '../../apis/etc2_memberapis/memberApis'
+import { chargeAccount, exchangeAccount, buyAuction, sellAuction } from '../../apis/memberapis/memberApis'
 
 
 const MypageWalletBox = () => {
diff --git a/src/apis/payment/paymentApis.js b/src/apis/payment/paymentApis.js
deleted file mode 100644
diff --git a/src/apis/etc2_memberapis/memberApis.js b/src/apis/memberapis/memberApis.js
rename from src/apis/etc2_memberapis/memberApis.js
rename to src/apis/memberapis/memberApis.js
